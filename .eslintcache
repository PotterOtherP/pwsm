[{"W:\\Web\\React\\react-lab\\src\\index.js":"1","W:\\Web\\React\\react-lab\\src\\App.js":"2","W:\\Web\\React\\react-lab\\src\\Table.js":"3","W:\\Web\\React\\react-lab\\src\\Form.js":"4","W:\\Web\\React\\react-lab\\src\\SampleRow.js":"5"},{"size":241,"mtime":1610968695349,"results":"6","hashOfConfig":"7"},{"size":16478,"mtime":1611415340312,"results":"8","hashOfConfig":"7"},{"size":2435,"mtime":1611415638025,"results":"9","hashOfConfig":"7"},{"size":5573,"mtime":1611415486587,"results":"10","hashOfConfig":"7"},{"size":3897,"mtime":1611409186348,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"iytsbx",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"W:\\Web\\React\\react-lab\\src\\index.js",[],["24","25"],"W:\\Web\\React\\react-lab\\src\\App.js",["26"],"W:\\Web\\React\\react-lab\\src\\Table.js",[],"W:\\Web\\React\\react-lab\\src\\Form.js",[],"W:\\Web\\React\\react-lab\\src\\SampleRow.js",["27","28","29","30","31"],"import React from 'react';\r\n\r\nconst all_plant_tests = [ \"Biomass\", \"C\", \"Cl\", \"DW\", \"ICP\", \"Mo\", \"N\", \"NO3\"];\r\nconst all_waste_tests = [ \"C\", \"CCE\", \"DM\", \"EC\", \"HM\", \"HM - All\", \"ICP\", \"Mo\", \"N\", \"NH4/NO3\", \"pH\", \"TKN\"];\r\nconst all_solution_tests = [ \"CBC\", \"Cl\", \"EC\", \"ICP\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\" ];\r\nconst all_media_tests = [ \"Bulk Density\", \"Cl\", \"EC\", \"ICP\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\" ];\r\n\r\nconst default_plant_tests = [\"ICP\", \"N\"];\r\nconst default_waste_liquid_tests = [\"ICP\", \"pH\", \"TKN\"];\r\nconst default_waste_solid_tests = [\"DM\", \"ICP\", \"N\"];\r\nconst default_solution_tests = [\"CBC\", \"Cl\", \"EC\", \"ICP\", \"NH4/NO3\", \"pH\"];\r\nconst default_media_tests = [\"EC\", \"ICP\", \"pH\"];\r\n\r\nconst TestEditForm = (props) => {\r\n\r\n    return (\r\n\r\n        <form id={props.id + \"testEditForm\"} style={{display: \"none\",}} >\r\n        {\r\n\r\n            props.testArray.map( (test) => {\r\n                return(<div key={test}>\r\n                        <input type=\"checkbox\" id={props.id + test} name={test} value={test}\r\n                        defaultChecked={props.assignedTests.includes(test)? true: false}\r\n                        onChange={(event) => props.assignTest(props.id, test, event.target.checked)} />\r\n                        <label htmlFor={props.id + test}>{test}</label>\r\n                       </div>);\r\n            })\r\n        }\r\n\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\nconst getTestArray = (type) => {\r\n\r\n    if (type === \"Plant\") return all_plant_tests;\r\n    if (type === \"Waste\") return all_waste_tests;\r\n    if (type === \"Solution\") return all_solution_tests;\r\n    if (type === \"Media\") return all_media_tests;\r\n}\r\n\r\nconst refreshCheckBoxes = (id, testArray, assignedTests) => {\r\n\r\n    for (let test of testArray)\r\n    {\r\n        if (assignedTests.includes(test))\r\n            document.getElementById(id + test).checked = true;\r\n        else\r\n            document.getElementById(id + test).checked = false;\r\n\r\n        // console.log(test + \": \" + (document.getElementById(id + test)).checked);\r\n    }\r\n}\r\n\r\nconst toggleTestEditForm = (id, testArray, assignedTests) =>\r\n{\r\n    refreshCheckBoxes(id, testArray, assignedTests);\r\n\r\n    const formId = id + \"testEditForm\";\r\n\r\n    const form = document.getElementById(formId);\r\n    let val = \"display: block;\";\r\n\r\n    if (form.getAttribute(\"style\") === (\"display: block;\"))\r\n        val = \"display: none;\";\r\n\r\n    document.getElementById(formId).setAttribute(\"style\", val);\r\n}\r\n\r\nconst SampleRow = (props) => {\r\n\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.sampleId}</td>\r\n            <td>\r\n                        <select name=\"sampleCode\" id=\"codeSelect\"  value={props.code} onChange={(event) => props.setSampleCode(props.index, event.target.value)} >\r\n                            {props.dropDown.map( (code, index) => {\r\n                                return (<option key={index} value={code}>{code}</option>);\r\n                            })}\r\n                        </select>\r\n            </td>\r\n            <td>{props.tests.join(\" \")}\r\n                <button id=\"testEdit\" onClick={() => toggleTestEditForm(props.sampleId, getTestArray(props.type), props.tests)} >\r\n                <img src=\"https://s2.svgbox.net/materialui.svg?ic=edit&color=fff\" alt=\"\"/>\r\n                </button>\r\n                <TestEditForm id={props.sampleId} testArray={getTestArray(props.type)} assignedTests={props.tests} assignTest={props.assignTest}/>\r\n\r\n            </td>\r\n\r\n            <td>\r\n                <input type=\"text\" value={props.comment} onChange={(event) => props.addComment(props.index, event.target.value)} />\r\n            </td>\r\n            <td>\r\n                <button onClick={() => props.insertSample(props.index)}>+</button>\r\n            </td>\r\n            <td>\r\n                <button onClick={() => props.removeSample(props.index)}>X</button>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SampleRow;",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":592,"column":10,"nodeType":"38","messageId":"39","endLine":592,"endColumn":23},{"ruleId":"36","severity":1,"message":"40","line":8,"column":7,"nodeType":"38","messageId":"39","endLine":8,"endColumn":26},{"ruleId":"36","severity":1,"message":"41","line":9,"column":7,"nodeType":"38","messageId":"39","endLine":9,"endColumn":33},{"ruleId":"36","severity":1,"message":"42","line":10,"column":7,"nodeType":"38","messageId":"39","endLine":10,"endColumn":32},{"ruleId":"36","severity":1,"message":"43","line":11,"column":7,"nodeType":"38","messageId":"39","endLine":11,"endColumn":29},{"ruleId":"36","severity":1,"message":"44","line":12,"column":7,"nodeType":"38","messageId":"39","endLine":12,"endColumn":26},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'getExtraTests' is defined but never used.","Identifier","unusedVar","'default_plant_tests' is assigned a value but never used.","'default_waste_liquid_tests' is assigned a value but never used.","'default_waste_solid_tests' is assigned a value but never used.","'default_solution_tests' is assigned a value but never used.","'default_media_tests' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]