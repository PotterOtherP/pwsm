{"version":3,"sources":["data.js","SampleRow.js","Table.js","Worklist.js","Form.js","App.js","index.js"],"names":["copyObject","obj","JSON","parse","stringify","isSolidWaste","code","waste_codes_solid","includes","getAllTests","type","all_plant_tests","all_waste_tests","all_solution_tests","all_media_tests","getStyledLabId","number","getStyledReportNumber","styledNumber","plant_codes","waste_codes","concat","sort","solution_codes","media_codes","default_plant_tests","default_waste_liquid_tests","default_waste_solid_tests","default_solution_tests","default_media_tests","extra_tests","saved_reports","saved_report_ids","saved_plant_report_numbers","saved_waste_report_numbers","saved_solution_report_numbers","saved_media_report_numbers","saved_plant_lab_ids","saved_waste_lab_ids","saved_solution_lab_ids","saved_media_lab_ids","TestEditForm","props","id","style","display","className","testArray","map","test","index","name","value","defaultChecked","assignedTests","onChange","event","assignTest","target","checked","htmlFor","toggleTestEditForm","document","getElementById","refreshCheckBoxes","formId","val","getAttribute","setAttribute","SampleRow","sampleId","setSampleCode","dropDown","tests","filter","item","join","title","onClick","src","alt","comment","addComment","insertSample","removeSample","LabHeader","rNum","reportData","sampleType","reportNumber","lNum","firstLabId","sampleRange","numSamples","sampleGrid","length","reportType","saveReport","clearGrid","TableHeader","TableBody","rows","row","Table","ReportRows","records","first","lastLabId","classname","samples","getElementsByClassName","visible","sample","toggleSamples","styledReportNumber","reportId","WorklistSampleRows","sampleIndex","allTests","ReportRowTestSection","SampleRowTestSection","letter","Worklist","Form","initialState","sampleCode","receiveDate","state","getCurrentDate","date","Date","year","getFullYear","month","getMonth","getDate","handleChange","setState","setReportType","handleSampleTypeChange","setFormSampleType","codeDiv","plantMenu","wasteMenu","solutionMenu","mediaMenu","getCodePhrase","selectNumSamples","select","submitForm","preventDefault","handleSubmit","this","onFocus","min","max","required","defaultValue","Component","App","createDisplay","worklistDisplay","formSampleType","formSampleCode","key","newComment","push","adjustGridIdNumbers","refreshSampleIDs","i","shift","deleteSavedReport","displayCreate","getNextNumbers","displayReports","window","alert","getDropDown","report_numbers","lab_numbers","getTests","result_array","hasOwnProperty","result_copy","reportInfo","Number","parseInt","copy","Object","create","assign","splice","newId","newReport","newCode","totalSamples","ReactDOM","render","StrictMode"],"mappings":"4OAQO,SAASA,EAAYC,GAExB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,IAO9B,SAASI,EAAaC,GACzB,OAAOC,EAAkBC,SAASF,GAM/B,SAASG,EAAYC,GAExB,MAAa,UAATA,EAAyBC,EAChB,UAATD,EAAyBE,EAChB,aAATF,EAA4BG,EACnB,UAATH,EAAyBI,OAA7B,EAMG,SAASC,EAAeL,EAAMM,GAEjC,OAAON,GAEH,IAAK,QAAS,MAAQ,IAAMM,EAC5B,IAAK,QAAU,MAAQ,IAAMA,EAC7B,IAAK,WAAa,MAAQ,IAAMA,EAChC,IAAK,QAAU,MAAQ,IAAMA,EAC7B,QAAS,OAAOA,GASjB,SAASC,EAAsBP,EAAMM,GAExC,IAAIE,EAAe,IAEnB,OAAOR,GAEH,IAAK,QAASQ,GAAgB,IAAK,MACnC,IAAK,QAASA,GAAgB,IAAK,MACnC,IAAK,WAAYA,GAAgB,IAAK,MACtC,IAAK,QAASA,GAAgB,IAYlC,OAFAA,GAAgBF,EAOb,IAAMG,EAAc,CAEvB,SACA,YACA,UACA,QACA,YACA,QACA,QACA,YACA,eACA,aACA,YACA,WACA,mBACA,UACA,SACA,aACA,WACA,cACA,QACA,WACA,OACA,SACA,WACA,YACA,UACA,MACA,SACA,MACA,cACA,UACA,gBACA,YACA,mBACA,kBACA,WACA,OACA,WACA,UACA,OACA,OACA,QACA,OACA,SACA,OACA,aACA,YACA,OACA,UACA,UACA,SACA,aACA,UACA,SACA,YACA,SACA,aACA,QACA,YA4BSZ,EAAoB,CAE7B,6BACA,yBACA,yBACA,iBACA,iBACA,gBACA,4BACA,gCACA,iCACA,iCACA,mCACA,iCACA,iCACA,mCACA,iCACA,gCACA,iCACA,qBACA,+BACA,8BACA,uBACA,qBACA,sBACA,yBACA,yBACA,2BACA,yCACA,0CACA,mCACA,mCACA,wCACA,yCACA,yCACA,yCACA,0CAMSa,EAjEqB,CAE9B,4BACA,6BACA,8BACA,4BACA,8BACA,4BACA,4BACA,yBACA,+CACA,0BACA,oBACA,qBACA,qBACA,qBACA,2CACA,oCACA,qCA+C0CC,O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","file":"static/js/main.4ae11fc9.chunk.js","sourcesContent":["/**\r\n * This file contains data and functions used by multiple classes.\r\n */\r\n\r\n /**\r\n * Performs a deep copy of an object without complex types.\r\n * Note to self: don't reinvent the wheel.\r\n */\r\nexport function copyObject (obj) {\r\n    \r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\n/**\r\n * Returns true if a waste sample is a solid type, false if liquid.\r\n * Used to determine which default tests are assigned.\r\n */\r\nexport function isSolidWaste(code) {\r\n    return waste_codes_solid.includes(code);\r\n}\r\n\r\n/**\r\n * Returns the array of all possible tests for a given sample type.\r\n */\r\nexport function getAllTests(type) {\r\n\r\n    if (type === \"Plant\") return all_plant_tests;\r\n    if (type === \"Waste\") return all_waste_tests;\r\n    if (type === \"Solution\") return all_solution_tests;\r\n    if (type === \"Media\") return all_media_tests;\r\n}\r\n\r\n/**\r\n * Returns a formatted lab ID number with the appropriate letter in front.\r\n */\r\nexport function getStyledLabId(type, number) {\r\n\r\n    switch(type)\r\n    {\r\n        case \"Plant\": return (\"P\" + number);\r\n        case \"Waste\":  return (\"W\" + number);\r\n        case \"Solution\":  return (\"S\" + number);\r\n        case \"Media\":  return (\"M\" + number);\r\n        default: return number;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Returns a formatted lab report number with the appropriate letter\r\n * and leading zeroes.\r\n */\r\nexport function getStyledReportNumber(type, number) {\r\n\r\n    let styledNumber = \"R\";\r\n\r\n    switch(type)\r\n    {\r\n        case \"Plant\": styledNumber += \"P\"; break;\r\n        case \"Waste\": styledNumber += \"W\"; break;\r\n        case \"Solution\": styledNumber += \"S\"; break;\r\n        case \"Media\": styledNumber += \"M\"; break;\r\n        default: break;\r\n    }\r\n\r\n    // if (number < 10) styledNumber += \"00000\";\r\n    // else if (number < 100) styledNumber += \"0000\";\r\n    // else if (number < 1000) styledNumber += \"000\";\r\n    // else if (number < 1000) styledNumber += \"00\";\r\n    // else if (number < 10000) styledNumber += \"0\";\r\n\r\n    styledNumber += number;\r\n\r\n    return styledNumber;\r\n}\r\n\r\n\r\n/** All plant codes */\r\nexport const plant_codes = [\r\n\r\n    \"Acacia\",\r\n    \"Ailanthus\",\r\n    \"Alfalfa\",\r\n    \"Apple\",\r\n    \"Asparagus\",\r\n    \"Basil\",\r\n    \"Beans\",\r\n    \"Bentgrass\",\r\n    \"Bermudagrass\",\r\n    \"Blackberry\",\r\n    \"Blueberry\",\r\n    \"Broccoli\",\r\n    \"Brussels sprouts\",\r\n    \"Cabbage\",\r\n    \"Canola\",\r\n    \"Cantaloupe\",\r\n    \"Carinata\",\r\n    \"Cauliflower\",\r\n    \"Cedar\",\r\n    \"Collards\",\r\n    \"Corn\",\r\n    \"Cotton\",\r\n    \"Cucumber\",\r\n    \"Dandelion\",\r\n    \"Dogwood\",\r\n    \"Elm\",\r\n    \"Fescue\",\r\n    \"Fig\",\r\n    \"Fir, Fraser\",\r\n    \"GH Hemp\",\r\n    \"GH Strawberry\",\r\n    \"GH Tomato\",\r\n    \"Grape, Muscadine\",\r\n    \"Grape, Vinifera\",\r\n    \"Honeydew\",\r\n    \"Kale\",\r\n    \"Kohlrabi\",\r\n    \"Lettuce\",\r\n    \"Oats\",\r\n    \"Okra\",\r\n    \"Peach\",\r\n    \"Pear\",\r\n    \"Pepper\",\r\n    \"Pine\",\r\n    \"Poinsettia\",\r\n    \"Raspberry\",\r\n    \"Rice\",\r\n    \"Soybean\",\r\n    \"Spinach\",\r\n    \"Squash\",\r\n    \"Strawberry\",\r\n    \"Tobacco\",\r\n    \"Tomato\",\r\n    \"Turfgrass\",\r\n    \"Turnip\",\r\n    \"Watermelon\",\r\n    \"Wheat\",\r\n    \"Zucchini\"\r\n\r\n];\r\n\r\n/** All liquid waste codes */\r\nexport const waste_codes_liquid = [\r\n\r\n    \"ALS - Swine Lagoon Liquid\",\r\n    \"ALF - Swine Farrow to Wean\",\r\n    \"ALP - Poultry Lagoon Liquid\",\r\n    \"ALO - Other Lagoon Liquid\",\r\n    \"ASP - Poultry Lagoon Sludge\",\r\n    \"ASS - Swine Lagoon Sludge\",\r\n    \"ASO - Other Lagoon Sludge\",\r\n    \"BID - Domestic septage\",\r\n    \"BLL - Leachates/effluents or reclaimed water\",\r\n    \"GTL - Grease trap water\",\r\n    \"LSB - Beef Slurry\",\r\n    \"LSD - Dairy Slurry\",\r\n    \"LSS - Swine Slurry\",\r\n    \"LSO - Other Slurry\",\r\n    \"NLF - Food/beverage by-products (liquid)\",\r\n    \"NLA - Animal by-products (liquid)\",\r\n    \"NLO - Non-composted liquid, other\",\r\n\r\n];\r\n\r\n/** All solid waste codes */\r\nexport const waste_codes_solid = [\r\n\r\n    \"BCO - Biosolids, composted\",\r\n    \"BIO - Biosolids, other\",\r\n    \"BIX - Biosolids, mixed\",\r\n    \"CSW - Wood ash\",\r\n    \"CSC - Coal ash\",\r\n    \"CSB - Biochar\",\r\n    \"CSO - Ash, mixed or other\",\r\n    \"FCB - Composted manure - Beef\",\r\n    \"FCD - Composted manure - Dairy\",\r\n    \"FCH - Composted manure - Horse\",\r\n    \"FCP - Composted manure - Poultry\",\r\n    \"FCS - Composted manure - Swine\",\r\n    \"FCO - Composted manure - Other\",\r\n    \"FPM - Compost, poultry mortality\",\r\n    \"FSM - Compost, swine mortality\",\r\n    \"FCW - Compost, plant material\",\r\n    \"FCX - Compost, mixed materials\",\r\n    \"FCV - Vermicompost\",\r\n    \"HBB - Broiler breeder litter\",\r\n    \"HBP - Broiler pullet litter\",\r\n    \"HLB - Broiler litter\",\r\n    \"HLL - Layer litter\",\r\n    \"HLT - Turkey litter\",\r\n    \"IOC - Paper fiber/pulp\",\r\n    \"IOL - Lime by-products\",\r\n    \"NBS - Wood waste/sawdust\",\r\n    \"NCR - Raw plant material/crop residues\",\r\n    \"NSF - Food/beverage by-products (solid)\",\r\n    \"NSA - Animal by-products (solid)\",\r\n    \"NSO - Non-composted solid, other\",\r\n    \"SSB - Beef Surface Scraped/Stockpiled\",\r\n    \"SSD - Dairy Surface Scraped/Stockpiled\",\r\n    \"SSH - Horse Surface Scraped/Stockpiled\",\r\n    \"SSS - Swine Surface Scraped/Stockpiled\",\r\n    \"SSO - Other Surface Scraped/Stockpiled\",\r\n\r\n];\r\n\r\n\r\n/** All waste codes */\r\nexport const waste_codes = waste_codes_liquid.concat(waste_codes_solid).sort();\r\n\r\n\r\n\r\n/** All solution codes */\r\nexport const solution_codes = [\r\n\r\n    \"AS - Source Water\",\r\n    \"AP - Pond Water\",\r\n    \"AO - Other Aquaculture\",\r\n    \"FP - Fish Production/Recreation\",\r\n    \"QG - Ground Water\",\r\n    \"QH - Household (nonpotable)\",\r\n    \"QS - Surface Water\",\r\n    \"QO - Other Water\",\r\n    \"NS - General Nutrient Solution\",\r\n    \"NT - Tobacco Nutrient Solution\",\r\n    \"NL - Pour-thru Leachate\",\r\n    \"NO - Other Nutrient Solution\",\r\n    \"LC - Cattle Water\",\r\n    \"LH - Horse Water\",\r\n    \"LS - Swine Water\",\r\n    \"LO - Other Livestock Water\",\r\n    \"IW - General Irrigation\",\r\n    \"IO - Overhead Irrigation\",\r\n    \"IT - Trickle Irrigation\",\r\n    \"HT - Hydroponic Tomato\",\r\n    \"HC - Hydroponic Cucumber\",\r\n    \"HL - Hydroponic Lettuce\",\r\n    \"HH - Hydroponic Herb\",\r\n    \"HH - Other Hydroponic\",\r\n    \"SP - Pesticide Solution\",\r\n    \"SH - Hydroponic Nutrient\",\r\n    \"SF - Floriculture Production\",\r\n    \"ST - Tobacco Transplant Production\",\r\n    \"SV - Vegetable Transplant Production\",\r\n    \"SO - Other Solution Source\"\r\n\r\n];\r\n\r\n\r\n/** All media codes */\r\nexport const media_codes = [\r\n\r\n    \"GHF - GH Floriculture\",\r\n    \"GHV - GH Vegetable\",\r\n    \"NUR - Nursery Crop\",\r\n    \"TOB - Tobacco Transplants\",\r\n    \"OTH - Other\"\r\n\r\n];\r\n\r\n/** All possible tests that can be assigned to each type, used in the checkbox menus and the worklist. */\r\nexport const all_plant_tests = [ \"Biomass\", \"C\", \"Cl\", \"Co\", \"DW\", \"HM\", \"HM-All\", \"ICP\", \"Li\", \"Mo\", \"N\", \"NO3\"];\r\nexport const all_waste_tests = [ \"C\", \"CCE\", \"DM\", \"EC\", \"HM\", \"HM-All\", \"ICP\", \"Mo\", \"N\", \"NH4/NO3\", \"pH\", \"TKN\"];\r\nexport const all_solution_tests = [ \"CBC\", \"Cl\", \"Co\", \"EC\", \"HM\", \"HM-All\", \"ICP\", \"Li\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\"];\r\nexport const all_media_tests = [ \"Bulk Density\", \"Cl\", \"Co\", \"EC\", \"HM\", \"HM-All\", \"ICP\", \"Li\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\"];\r\n\r\n\r\n/** Default tests assigned to every sample of a particular type. */\r\nexport const default_plant_tests = [\"ICP\", \"N\"];\r\nexport const default_waste_liquid_tests = [\"ICP\", \"pH\", \"TKN\"];\r\nexport const default_waste_solid_tests = [\"DM\", \"ICP\", \"N\"];\r\nexport const default_solution_tests = [\"CBC\", \"EC\", \"ICP\", \"NH4/NO3\", \"pH\"];\r\nexport const default_media_tests = [\"EC\", \"ICP\", \"pH\"];\r\n\r\n\r\n/** An object mapping a sample to the extra, non-default tests it gets automatically assigned. */\r\nexport const extra_tests = {\r\n\r\n    \"Alfalfa\": [\"Mo\"],\r\n    \"Broccoli\": [\"Mo\"],\r\n    \"Brussels sprouts\": [\"Mo\"],\r\n    \"Cauliflower\": [\"Mo\"],\r\n    \"Cabbage\": [\"Mo\"],\r\n    \"Canola\": [\"Mo\"],\r\n    \"Collards\": [\"Mo\"],\r\n    \"Kale\": [\"Mo\"],\r\n    \"Kohlrabi\": [\"Mo\"],\r\n    \"Poinsettia\": [\"Mo\"],\r\n    \"Spinach\": [\"Mo\"],\r\n    \"Turnip\": [\"Mo\"],\r\n\r\n    \"Strawberry\": [\"NO3\"],\r\n    \"Cotton\": [\"NO3\"],\r\n\r\n    \"BID - Domestic septage\": [\"pH\", \"EC\"],\r\n    \"BCO - Biosolids, composted\": [\"C\", \"pH\", \"EC\"],\r\n    \"BIO - Biosolids, other\": [\"C\", \"pH\", \"EC\"],\r\n    \"BIX - Biosolids, mixed\": [\"C\", \"pH\", \"EC\"],\r\n    \"BLL - Leachates/effluents or reclaimed water\": [\"pH\", \"EC\"],\r\n\r\n    \"CSW - Wood ash\": [\"C\", \"pH\", \"EC\"],\r\n    \"CSC - Coal ash\": [\"C\", \"pH\", \"EC\"],\r\n    \"CSB - Biochar\": [\"C\", \"pH\", \"EC\"],\r\n    \"CSO - Ash, mixed or other\": [\"C\", \"pH\", \"EC\"],\r\n\r\n    \"FCB - Composted manure - Beef\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCD - Composted manure - Dairy\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCH - Composted manure - Horse\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCP - Composted manure - Poultry\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCS - Composted manure - Swine\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCO - Composted manure - Other\": [\"C\", \"pH\", \"EC\"],\r\n    \"FPM - Compost, poultry mortality\": [\"C\", \"pH\", \"EC\"],\r\n    \"FSM - Compost, swine mortality\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCW - Compost, plant material\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCX - Compost, mixed materials\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCV - Vermicompost\": [\"C\", \"pH\", \"EC\"],\r\n\r\n    \"GTL - Grease trap water\": [\"pH\", \"EC\"],\r\n\r\n    \"IOC - Paper fiber/pulp\": [\"C\", \"pH\", \"EC\"],\r\n    \"IOL - Lime by-products\": [\"CCE\", \"pH\", \"EC\"],\r\n\r\n    \"NBS - Wood waste/sawdust\": [\"C\", \"pH\", \"EC\"],\r\n    \"NCR - Raw plant material/crop residues\": [\"C\", \"pH\", \"EC\"],\r\n    \"NSF - Food/beverage by-products (solid)\": [\"C\", \"pH\", \"EC\"],\r\n    \"NLF - Food/beverage by-products (liquid)\": [\"pH\", \"EC\"],\r\n    \"NSA - Animal by-products (solid)\": [\"C\", \"pH\", \"EC\"],\r\n    \"NLA - Animal by-products (liquid)\": [\"pH\", \"EC\"],\r\n    \"NSO - Non-composted solid, other\": [\"C\", \"pH\", \"EC\"],\r\n    \"NLO - Non-composted liquid, other\": [\"pH\", \"EC\"]\r\n\r\n\r\n};\r\n\r\n\r\n\r\n/** Emptry arrays that will be used to store report data created by the user. */\r\nexport const saved_reports = [];\r\nexport const saved_report_ids = [];\r\n\r\nexport const saved_plant_report_numbers = [];\r\nexport const saved_waste_report_numbers = [];\r\nexport const saved_solution_report_numbers = [];\r\nexport const saved_media_report_numbers = [];\r\n\r\nexport const saved_plant_lab_ids = [];\r\nexport const saved_waste_lab_ids = [];\r\nexport const saved_solution_lab_ids = [];\r\nexport const saved_media_lab_ids = [];\r\n\r\n\r\n\r\n/** Something to export */\r\nconst myConstant = 4242;\r\nexport default myConstant;","import React from 'react';\r\nimport {default_plant_tests, default_waste_liquid_tests, default_waste_solid_tests,\r\n        default_solution_tests, default_media_tests,\r\n        isSolidWaste, getAllTests, getStyledLabId} from './data.js';\r\n\r\n\r\n/**\r\n *  A component for the test edit menu on each sample row.\r\n *  Consists of a grid of checkboxes. \r\n */\r\nconst TestEditForm = (props) => {\r\n\r\n    return (\r\n\r\n        <form id={props.id + \"testEditForm\"} style={{display: \"none\",}} >\r\n        <div className=\"testEditForm\">\r\n        {\r\n            props.testArray.map( (test, index) => {\r\n                return(<div key={test + index} className=\"testCheckbox\">\r\n                        <input type=\"checkbox\"  id={props.id + test} name={test} value={test}\r\n                        defaultChecked={props.assignedTests.includes(test)? true: false}\r\n                        onChange={(event) => props.assignTest(props.id, test, event.target.checked)}></input>\r\n                        <label htmlFor={props.id + test}>{test}</label>\r\n                        \r\n                       </div>);\r\n            })\r\n        }\r\n        </div>\r\n\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\n\r\n/**\r\n * Each time the menu is opened or closed, the checkboxes are updated to\r\n * ensure they reflect the actual array of tests assigned to the sample.\r\n */\r\nconst refreshCheckBoxes = (id, testArray, assignedTests) => {\r\n\r\n    for (let test of testArray)\r\n    {\r\n        if (assignedTests.includes(test))\r\n            document.getElementById(id + test).checked = true;\r\n        else\r\n            document.getElementById(id + test).checked = false;\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Controls the visibility of the test edit checkbox form.\r\n */\r\nconst toggleTestEditForm = (id, testArray, assignedTests) =>\r\n{\r\n    refreshCheckBoxes(id, testArray, assignedTests);\r\n\r\n    const formId = id + \"testEditForm\";\r\n\r\n    const form = document.getElementById(formId);\r\n    let val = \"display: block;\";\r\n\r\n    if (form.getAttribute(\"style\") === (\"display: block;\"))\r\n        val = \"display: none;\";\r\n\r\n    document.getElementById(formId).setAttribute(\"style\", val);\r\n}\r\n\r\n\r\n/**\r\n * A component for each row of the sample grid table that appears on the \"Create Report\" page.\r\n */\r\nconst SampleRow = (props) => {\r\n\r\n\r\n    return (\r\n        <tr>\r\n            <td>{getStyledLabId(props.type, props.sampleId)}</td>\r\n            <td>\r\n                        <select name=\"sampleCode\" id=\"codeSelect\"  value={props.code} onChange={(event) => props.setSampleCode(props.index, event.target.value)} >\r\n                            {props.dropDown.map( (code, index) => {\r\n                                return (<option key={index} value={code}>{code}</option>);\r\n                            })}\r\n                        </select>\r\n            </td>\r\n            <td>{props.tests.filter(item => { \r\n                \r\n                if (props.type === \"Plant\" && default_plant_tests.includes(item)) return false; \r\n                if (props.type === \"Waste\" && !isSolidWaste(props.code) && default_waste_liquid_tests.includes(item)) return false; \r\n                if (props.type === \"Waste\" && isSolidWaste(props.code) && default_waste_solid_tests.includes(item)) return false; \r\n                if (props.type === \"Solution\" && default_solution_tests.includes(item)) return false; \r\n                if (props.type === \"Media\" && default_media_tests.includes(item)) return false;\r\n\r\n\r\n                return true;\r\n\r\n            }).join(\" \")}\r\n\r\n\r\n                <button id=\"testEdit\" className=\"editTests\" title=\"Edit Tests\" onClick={() => toggleTestEditForm(props.sampleId, getAllTests(props.type), props.tests)} >\r\n                <img src=\"https://s2.svgbox.net/materialui.svg?ic=edit&color=fff\" alt=\"\"/>\r\n                </button>\r\n                <TestEditForm id={props.sampleId} testArray={getAllTests(props.type)} assignedTests={props.tests} assignTest={props.assignTest}/>\r\n\r\n            </td>\r\n\r\n            <td>\r\n                <input type=\"text\" value={props.comment} onChange={(event) => props.addComment(props.index, event.target.value)} />\r\n            </td>\r\n            <td>\r\n                <button className=\"duplicate gridButton\" title=\"Duplicate Row\" onClick={() => props.insertSample(props.index)}>+</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"delete gridButton\" title=\"Delete Row\" onClick={() => props.removeSample(props.index)}>X</button>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SampleRow;","import React from 'react';\r\nimport SampleRow from './SampleRow';\r\nimport {getStyledReportNumber, getStyledLabId} from './data.js';\r\n\r\n\r\n/**\r\n * A component for the first row of the table, displaying report information: report type,\r\n * report number and sample range (which are automatically calculated )\r\n */\r\nconst LabHeader = (props) => {\r\n\r\n    const rNum = getStyledReportNumber(props.reportData.sampleType, props.reportData.reportNumber);\r\n    let lNum = getStyledLabId(props.reportData.sampleType, props.reportData.firstLabId);\r\n    let sampleRange = (props.reportData.numSamples > 1)? lNum + \" - \" + (props.reportData.firstLabId + props.reportData.numSamples - 1)\r\n        : lNum;\r\n\r\n    if (props.reportData.sampleGrid.length > 0)\r\n    return (\r\n        <thead>\r\n            <tr className=\"tr-fixed\">\r\n                <th>{rNum + \" - \" + props.reportData.reportType}</th>\r\n                <th>Samples: {sampleRange}</th>\r\n                <th></th>\r\n                <th><button id=\"saveButton\" onClick={() => props.saveReport()}>Save Report</button></th>\r\n                <th></th>\r\n                <th><button id=\"clearButton\" onClick={() => props.clearGrid()}>Clear Grid</button></th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n\r\n    else\r\n        return (\r\n        <thead>\r\n            <tr>\r\n                <th>Report Type: {props.reportData.reportType} </th>\r\n                <th></th>\r\n                <th></th>\r\n                <th></th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n\r\n};\r\n\r\n/**\r\n * The header for the grid of samples - doesn't change\r\n */\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Lab ID</th>\r\n                <th>Crop/Code</th>\r\n                <th>Extra Tests</th>\r\n                <th>Comment</th>\r\n                <th>Insert</th>\r\n                <th>Delete</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\n/**\r\n * The component for the grid of sample rows.\r\n */\r\nconst TableBody = (props) => {\r\n\r\n    const rows = props.reportData.sampleGrid.map((row, index) => {\r\n        return (\r\n            <SampleRow\r\n            addComment={props.addComment}\r\n            assignTest={props.assignTest}\r\n            code={row.code}\r\n            comment={row.comment}\r\n            dropDown={props.dropDown}\r\n            index={index}\r\n            insertSample={props.insertSample}\r\n            key={index}\r\n            sampleId={row.sampleId}\r\n            removeSample={props.removeSample}\r\n            setSampleCode={props.setSampleCode}\r\n            tests={row.tests}\r\n            type={props.reportData.sampleType}\r\n            />\r\n           \r\n        );\r\n    });\r\n    return (\r\n        <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\n/**\r\n * The table of samples that is generated from the \"Create Report\" button.\r\n */\r\nconst Table = (props) => {\r\n\r\n    // const {reportData, removeSample} = props;\r\n\r\n    return (\r\n\r\n        <table className=\"striped-table pwsm-table\">\r\n            <LabHeader reportData={props.reportData} clearGrid={props.clearGrid} saveReport={props.saveReport} />\r\n            <TableHeader />\r\n            <TableBody\r\n                addComment={props.addComment}\r\n                assignTest={props.assignTest}\r\n                dropDown={props.dropDown}\r\n                insertSample={props.insertSample}\r\n                removeSample={props.removeSample}\r\n                reportData={props.reportData}\r\n                setSampleCode={props.setSampleCode}\r\n                />\r\n        </table>\r\n        );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport {all_plant_tests, all_waste_tests, all_solution_tests, all_media_tests,\r\n    getStyledLabId} from './data.js';\r\n\r\n/**\r\n * The worklist is one large table with expandable rows for each report. Expanding a report\r\n * row will reveal all of it samples and their assigned tests.\r\n */\r\nconst Worklist = (props) => {\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n        <table className=\"worklist-table\">\r\n            <thead>\r\n            </thead>\r\n        <ReportRows records={props.records}/>\r\n        </table>\r\n        </div>\r\n        );\r\n}\r\n\r\n/**\r\n * The component that generates the report rows, including a row with all relevant tests\r\n * and a row for each sample in the report. Only the report row is visible initially.\r\n */\r\nconst ReportRows = (props) => {\r\n\r\n    /**\r\n     * This function is triggered when the report row is clicked.\r\n     */\r\n    const toggleSamples = (classname) => {\r\n\r\n\r\n        let samples = document.getElementsByClassName(classname);\r\n        let test = document.getElementById(classname);\r\n\r\n        let visible = samples[0].getAttribute(\"style\") === (\"display: table-row\");\r\n\r\n        for (let sample of samples)\r\n        {\r\n            if (visible)\r\n            {\r\n                sample.setAttribute(\"style\", \"display: none\");\r\n                test.setAttribute(\"style\", \"display: none\");\r\n            }\r\n            else\r\n            {\r\n                sample.setAttribute(\"style\", \"display: table-row\");\r\n                test.setAttribute(\"style\", \"display: table-row\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return props.records.map((row, index) => {\r\n\r\n        let first = getStyledLabId(row.sampleType, row.firstLabId);\r\n        let sampleRange = (row.firstLabId < row.lastLabId)? (first + \" - \" + row.lastLabId)\r\n        : first;\r\n\r\n        let testArray = all_plant_tests;\r\n        if (row.sampleType === \"Waste\") testArray = all_waste_tests;\r\n        if (row.sampleType === \"Solution\") testArray = all_solution_tests;\r\n        if (row.sampleType === \"Media\") testArray = all_media_tests;\r\n\r\n        return(\r\n        <tbody key={index + \"tbody\"}>\r\n                <tr key={index + \"tr\"} className=\"worklist-report-row\" onClick={() => toggleSamples(\"worklist-sample-row\" + row.styledReportNumber)}>\r\n                <td title=\"Expand/Collapse Report\" style={{\"cursor\": \"default\"}}>☰</td>\r\n                <td>{row.styledReportNumber + \" - \" + row.reportType}</td>\r\n                <td>{sampleRange}</td>\r\n                <td></td><td></td><td></td><td></td>\r\n                <td></td><td></td><td></td><td></td>\r\n                <td></td><td></td><td></td><td></td>\r\n                <td>Comment</td>\r\n                </tr>\r\n\r\n                <tr key={index + \"trtests\"} id={\"worklist-sample-row\" + row.styledReportNumber} className=\"worklist-test-row\">\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n                <ReportRowTestSection tests={testArray} />\r\n                <td></td>\r\n                </tr>\r\n\r\n                <WorklistSampleRows samples={row.sampleGrid} type={row.sampleType} reportId={row.styledReportNumber} testArray={testArray}/>                \r\n        </tbody>\r\n        );\r\n\r\n    });\r\n\r\n}\r\n\r\n/**\r\n * A component for the sample rows in a particular report.\r\n */\r\nconst WorklistSampleRows = (props) => {\r\n\r\n    return props.samples.map((sample, sampleIndex) => {\r\n\r\n        return (\r\n            <tr key={sampleIndex + \"sampletr\"} className={\"worklist-sample-row\" + props.reportId + \" worklist-sample-row\"}>\r\n            <td></td>\r\n            <td>{getStyledLabId(props.type, sample.sampleId)}</td>\r\n            <td>{sample.code}</td>\r\n            <SampleRowTestSection allTests={props.testArray} assignedTests={sample.tests} />\r\n            <td>{sample.comment}</td>\r\n            </tr>\r\n            );\r\n    });\r\n}\r\n\r\n/**\r\n * Creates the <td> elements for each test\r\n */\r\nconst ReportRowTestSection = (props) => {\r\n\r\n    return props.tests.map((test, index) => {\r\n        return(<td key={test + index}>{test}</td>);\r\n        \r\n    });\r\n}\r\n\r\n/**\r\n * Prints an \"O\" for each test assigned to the sample. Tests not assigned are left blank.\r\n */\r\nconst SampleRowTestSection = (props) => {\r\n\r\n    return props.allTests.map((test, index) => {\r\n\r\n        let letter = props.assignedTests.includes(test)? \"O\" : \"\";\r\n\r\n        return(<td key={test + index}>{letter}</td>);\r\n        \r\n    });\r\n}\r\n\r\nexport default Worklist;","import React, {Component} from 'react';\r\n\r\n/**\r\n * This component contains the fields modified by the user to create a report:\r\n * sample type, report type, sample code/crop name, number of samples, and date received.\r\n */\r\nclass Form extends Component {\r\n\r\n    componentDidMount() {\r\n        this.setState({receiveDate: this.getCurrentDate()});\r\n    }\r\n\r\n    initialState = {\r\n\r\n        sampleType: 'Plant',\r\n        reportType: 'Predictive',\r\n        numSamples: 1,\r\n        sampleCode: this.props.dropDown[0],\r\n        receiveDate: \"1985-01-01\"\r\n\r\n    };\r\n\r\n\r\n\r\n    state = this.initialState;\r\n\r\n\r\n    /**\r\n     * Returns a string YYYY-MM-DD with the current date in the local time zone.\r\n     */\r\n    getCurrentDate = () => {\r\n\r\n        const date = new Date();\r\n        const year = date.getFullYear();\r\n        let month = date.getMonth() + 1;\r\n            if (month < 10) month = \"0\" + month;\r\n        const day = date.getDate();\r\n\r\n        return (year + \"-\" + month + \"-\" + day);\r\n    }\r\n\r\n    /**\r\n     * Sets the Form component state when a field value is changed.\r\n     */\r\n    handleChange = (event) => {\r\n\r\n        this.setState(state => {\r\n            return { [event.target.name]: event.target.value };\r\n        });\r\n\r\n        if (event.target.name === \"reportType\")\r\n            this.props.setReportType(event.target.value);\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * When the sample type is changed, it is passed up to the App state.\r\n     * The grid is cleared and the drop-down is updated. There is also\r\n     * a color-coded area next to the drop-down to make the change more\r\n     * noticeable.\r\n     */\r\n    handleSampleTypeChange = (event) => {\r\n\r\n        this.props.clearGrid();\r\n        this.props.setFormSampleType(event.target.value);\r\n        this.setState(state => {\r\n\r\n            let type = event.target.value;\r\n            let code = \"\";\r\n            let codeDiv = document.getElementById(\"codeColor\");\r\n\r\n            switch(type)\r\n            {\r\n                case \"Plant\":\r\n                    code = this.props.plantMenu[0];\r\n                    codeDiv.setAttribute(\"style\", \"background-color: #ffff99;\");\r\n                    break;\r\n                case \"Waste\":\r\n                    code = this.props.wasteMenu[0];\r\n                    codeDiv.setAttribute(\"style\", \"background-color: #ffbf80;\");\r\n                    break;\r\n                case \"Solution\":\r\n                    code = this.props.solutionMenu[0];\r\n                    codeDiv.setAttribute(\"style\", \"background-color: #99ddff;\");\r\n                    break;\r\n                case \"Media\":\r\n                    code = this.props.mediaMenu[0];\r\n                    codeDiv.setAttribute(\"style\", \"background-color: #ffb3cc;\");\r\n                    break;\r\n\r\n                default: break;\r\n            }\r\n\r\n\r\n            return {sampleType: type, sampleCode: code};\r\n        });\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Just so we can have say that a crop has a \"name\"\r\n     * and other types of samples have a \"code\".\r\n     */\r\n    getCodePhrase = (type) => {\r\n\r\n        switch(type)\r\n        {\r\n            case \"Plant\": return \"Plant Crop Name: \";\r\n            case \"Waste\": return \"Waste Code: \";\r\n            case \"Solution\": return \"Solution Code: \";\r\n            case \"Media\": return \"Media Code: \";\r\n            default: return \"Crop/Code\";\r\n        }\r\n    }\r\n        \r\n    /**\r\n     * A function to help highlight the \"Number of Samples\" field when it gets focus.\r\n     */\r\n    selectNumSamples = () => { document.getElementById(\"numSamplesInput\").select(); }\r\n\r\n\r\n    /**\r\n     * Called when the \"Create Grid\" button is clicked.\r\n     */\r\n    submitForm = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleSubmit(this.state);\r\n    }\r\n\r\n    render(props) {\r\n\r\n        return (\r\n            <form>\r\n\r\n                <fieldset className=\"flex-row\" onChange={this.handleSampleTypeChange}>\r\n                    <label>Select Sample Type:</label>\r\n                    <input type=\"radio\" id=\"plant\" name=\"sampleType\" value=\"Plant\" defaultChecked />\r\n                    <label htmlFor=\"plant\"><div className=\"radioArea plantBG\">Plant</div></label>\r\n\r\n                    <input type=\"radio\" id=\"waste\" name=\"sampleType\" value=\"Waste\" />\r\n                    <label htmlFor=\"waste\"><div className=\"radioArea wasteBG\">Waste</div></label>\r\n\r\n                    <input type=\"radio\" id=\"solution\" name=\"sampleType\" value=\"Solution\" />\r\n                    <label htmlFor=\"solution\"> <div className=\"radioArea solutionBG\">Solution</div></label>\r\n\r\n                    <input type=\"radio\" id=\"media\" name=\"sampleType\" value=\"Media\" />\r\n                    <label htmlFor=\"media\"><div className=\"radioArea mediaBG\">Media</div></label>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"flex-row\" onChange={this.handleChange}>\r\n                    <label>Select Report Type:</label>\r\n                    <input type=\"radio\" id=\"predictive\" name=\"reportType\" value=\"Predictive\" defaultChecked />\r\n                    <label htmlFor=\"predictive\"> <div className=\"radioArea reportTypeBG\">Predictive</div></label>\r\n\r\n                    <input type=\"radio\" id=\"diagnostic\" name=\"reportType\" value=\"Diagnostic\" />\r\n                    <label htmlFor=\"diagnostic\"> <div className=\"radioArea reportTypeBG\">Diagnostic</div></label>\r\n\r\n                    <input type=\"radio\" id=\"research\" name=\"reportType\" value=\"Research\" />\r\n                    <label htmlFor=\"research\"> <div className=\"radioArea reportTypeBG\">Research</div></label>\r\n\r\n                    <input type=\"radio\" id=\"internal\" name=\"reportType\" value=\"Internal\" />\r\n                    <label htmlFor=\"internal\"> <div className=\"radioArea reportTypeBG\">Internal</div></label>\r\n\r\n                    <input type=\"radio\" id=\"out-of-state\" name=\"reportType\" value=\"Out of State\" />\r\n                    <label htmlFor=\"out-of-state\"> <div className=\"radioArea reportTypeBG\">Out of State</div></label>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"flex-row form-bottom-row\">\r\n\r\n                    <label id=\"codeColor\">{this.getCodePhrase(this.state.sampleType)}</label>\r\n                    <select name=\"sampleCode\" id=\"codeSelect\" onChange={this.handleChange} value={this.state.sampleCode} >\r\n                        {this.props.dropDown.map( (code, index) => {\r\n                            return (<option key={index} value={code}>{code}</option>);\r\n                        })}\r\n                    </select>\r\n\r\n                    <label htmlFor=\"numSamples\">Number of Samples:</label>\r\n                    <input type=\"number\" id=\"numSamplesInput\" name=\"numSamples\" onChange={this.handleChange}\r\n                    onFocus={this.selectNumSamples} value={this.state.numSamples} min=\"1\" max=\"200\" required />\r\n\r\n                    <label htmlFor=\"receiveDate\">Date Received:</label>\r\n                    <input type=\"date\" id=\"receiveDateInput\" name=\"receiveDate\"\r\n                    defaultValue={this.getCurrentDate()}\r\n                    onChange={this.handleChange}/>\r\n\r\n                </fieldset>\r\n                \r\n\r\n                <input type=\"submit\" id=\"create-grid-button\" value=\"Create Grid\" onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport Table from './Table';\r\nimport Worklist from './Worklist';\r\nimport Form from './Form';\r\nimport {plant_codes, waste_codes, solution_codes, media_codes,\r\n        default_plant_tests, default_waste_solid_tests, default_waste_liquid_tests, default_solution_tests, default_media_tests,\r\n        extra_tests, saved_reports, saved_report_ids, saved_plant_report_numbers, saved_waste_report_numbers,\r\n        saved_solution_report_numbers, saved_media_report_numbers, saved_plant_lab_ids, saved_waste_lab_ids,\r\n        saved_solution_lab_ids, saved_media_lab_ids,\r\n        copyObject, getAllTests, isSolidWaste, getStyledReportNumber} from './data.js';\r\n\r\n\r\n/**\r\n *  Author: Nathan Tryon\r\n *  Source: https://github.com/PotterOtherP/pwsm\r\n *  This app simulates the receiving screen of the PWSM lab,\r\n *  allowing the user to create reports and generate a worklist showing\r\n *  all samples with their assigned lab tests and user-added comments.\r\n */\r\nclass App extends Component {\r\n\r\n    /**\r\n     * Ensures that the correct report number and lab IDs are displayed with every render.\r\n     */\r\n    componentDidMount() {\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                reportNumber: this.getNextNumbers(this.state.sampleType)[0],\r\n                firstLabId: this.getNextNumbers(this.state.sampleType)[1]\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /** Create and set the initial state */\r\n    initialState = {\r\n\r\n        createDisplay: true,\r\n        worklistDisplay: false,\r\n\r\n        sampleType: \"Plant\",\r\n        formSampleType: \"Plant\",\r\n        formSampleCode: plant_codes[0],\r\n        reportType: \"Predictive\",\r\n        reportNumber: 101,\r\n        firstLabId: 1001,\r\n        numSamples: 1,\r\n        receiveDate: \"1985-01-01\",\r\n        sampleCode: '',\r\n        sampleGrid: []\r\n    };\r\n\r\n\r\n    state = this.initialState;\r\n\r\n\r\n\r\n    /**\r\n     * Adds a comment to a row in the sample grid\r\n     */\r\n    addComment = (key, newComment) => {\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n            samples[key].comment = newComment; \r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Assigns (or removes) a lab test from a sample when\r\n     * it is checked or unchecked by the user in the test\r\n     * checkbox menu.\r\n     */\r\n    assignTest = (id, test, val) => {\r\n\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n\r\n            samples = samples.map( row => {\r\n\r\n                if (row.sampleId === id)\r\n                {\r\n                    if (val === true && !row.tests.includes(test))\r\n                    {\r\n                        row.tests.push(test);\r\n                        row.tests.sort();\r\n\r\n                    }\r\n\r\n                    else if (val === false && row.tests.includes(test))\r\n                    {\r\n                        row.tests = row.tests.filter(item => item !== test);\r\n\r\n                    }\r\n                }\r\n\r\n                return row;\r\n            })\r\n\r\n            return { sampleGrid: samples };\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Refreshes the sample grid lab IDs whenever a row is inserted or deleted.\r\n     */\r\n    adjustGridIdNumbers = () => {\r\n\r\n        this.refreshSampleIDs();\r\n        this.setState(state => {\r\n\r\n            let first = state.firstLabId;\r\n            let samples = state.sampleGrid;\r\n\r\n            for (let i = 0; i < state.numSamples; ++i)\r\n            {\r\n                samples[i].sampleId = first + i;\r\n            }\r\n\r\n            return { sampleGrid: samples };\r\n        })\r\n\r\n    }\r\n\r\n    /** Removes all samples from the grid (and the state), ensuring a clean slate. \r\n     *\r\n     */\r\n    clearGrid = () => {\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n\r\n            for (let sample of samples)\r\n            {\r\n                while (sample.tests.length > 0)\r\n                    sample.tests.shift();\r\n\r\n            }\r\n\r\n            while (samples.length > 0)\r\n                samples.shift();\r\n\r\n            return {sampleGrid: samples, numSamples: 1}\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes a saved report from the report storage array.\r\n     */\r\n    deleteSavedReport = (reportNumber) =>\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * Shows the report creation screen on the page, hiding the worklist/report edit screeen.\r\n     */\r\n    displayCreate = () => {\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                sampleType: \"Plant\",\r\n                sampleCode: plant_codes[0],\r\n                formSampleType: \"Plant\",\r\n                formSampleCode: plant_codes[0],\r\n                reportType: \"Predictive\",\r\n                reportNumber: this.getNextNumbers(\"Plant\")[0],\r\n                firstLabId: this.getNextNumbers(\"Plant\")[1],\r\n                createDisplay: true,\r\n                worklistDisplay: false\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Shows the worklist/report edit screen, hides the creation screen.\r\n     */\r\n    displayReports = () => {\r\n\r\n        if (saved_reports.length < 1)\r\n        {\r\n            window.alert(\"No reports have been created.\");\r\n            return;\r\n        }\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                createDisplay: false,\r\n                worklistDisplay: true\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns the appropriate code dropdown menu for the specified sample type.\r\n     */\r\n    getDropDown = (type) => {\r\n\r\n        switch (type)\r\n        {\r\n            case \"Plant\": return plant_codes;\r\n            case \"Waste\": return waste_codes;\r\n            case \"Solution\": return solution_codes;\r\n            case \"Media\": return media_codes;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the next report number and lab ID number based on previously\r\n     * used numbers for the current sample type.\r\n     */\r\n    getNextNumbers = (type) => {\r\n\r\n        let report_numbers = saved_plant_report_numbers;\r\n        let lab_numbers = saved_plant_lab_ids;\r\n        let nextReportNumber = 1;\r\n        let nextLabNumber = 1;\r\n\r\n        switch (type)\r\n        {\r\n            case \"Waste\":\r\n                report_numbers = saved_waste_report_numbers;\r\n                lab_numbers = saved_waste_lab_ids;\r\n                break;\r\n\r\n            case \"Solution\":\r\n                report_numbers = saved_solution_report_numbers;\r\n                lab_numbers = saved_solution_lab_ids;\r\n                break;\r\n\r\n            case \"Media\":\r\n                report_numbers = saved_media_report_numbers;\r\n                lab_numbers = saved_media_lab_ids;\r\n                break;\r\n\r\n            default: break;\r\n        }\r\n\r\n        if (report_numbers.length < 1)\r\n            nextReportNumber = 101;\r\n        else\r\n            nextReportNumber = report_numbers[report_numbers.length - 1] + 1;\r\n\r\n        if (lab_numbers.length < 1)\r\n            nextLabNumber = 1001;\r\n        else\r\n            nextLabNumber = lab_numbers[lab_numbers.length - 1] + 1;\r\n\r\n        return [nextReportNumber, nextLabNumber];\r\n    }\r\n\r\n    /**\r\n     *  Returns an array of all initially assigned tests to a particular sample code.\r\n     */\r\n    getTests = (type, code) => {\r\n        let result_array = [];\r\n\r\n        switch(type)\r\n        {\r\n            case \"Plant\":\r\n                result_array = default_plant_tests;\r\n                break;\r\n            case \"Solution\":\r\n                result_array = default_solution_tests;\r\n                break;\r\n            case \"Media\":\r\n                result_array = default_media_tests;\r\n                break;\r\n            case \"Waste\":\r\n                if (isSolidWaste(code))\r\n                    result_array = default_waste_solid_tests;\r\n                else\r\n                    result_array = default_waste_liquid_tests;\r\n                break;\r\n\r\n            default: break;\r\n        }\r\n\r\n        if (extra_tests.hasOwnProperty(code))\r\n            result_array = result_array.concat(extra_tests[code]);\r\n\r\n\r\n        let result_copy = [];\r\n        for (let item of result_array)\r\n            result_copy.push(item);\r\n\r\n        return result_copy;\r\n    }\r\n\r\n    /**\r\n     * When the form is submitted with the Create Report button,\r\n     * this function is called to transmit the form data to the\r\n     * App state.\r\n     * The sample grid is updated after the first setState() call.\r\n     */\r\n    handleSubmit = (reportInfo) => {\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                sampleType: reportInfo.sampleType,\r\n                reportType: reportInfo.reportType,\r\n                numSamples: Number.parseInt(reportInfo.numSamples),\r\n                sampleCode: reportInfo.sampleCode,\r\n                receiveDate: reportInfo.receiveDate\r\n            };\r\n\r\n        });\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = [];\r\n\r\n            for (let i = 0; i < reportInfo.numSamples; ++i)\r\n            {\r\n                samples.push({\r\n                    sampleId: Number.parseInt(this.state.firstLabId) + i,\r\n                    code: reportInfo.sampleCode,\r\n                    tests: this.getTests(reportInfo.sampleType, reportInfo.sampleCode),\r\n                    comment: \"\"});\r\n            }\r\n\r\n\r\n            return {sampleGrid: samples};\r\n\r\n        });\r\n    \r\n    }\r\n\r\n\r\n    /**\r\n     * Duplicates a row in the sample grid.\r\n     */\r\n    insertSample = (index) => {\r\n\r\n        let samples = this.state.sampleGrid;\r\n        let copy = Object.create(samples[index]);\r\n        copy = Object.assign(copy, samples[index]);\r\n\r\n        copy.tests = copyObject(samples[index].tests);\r\n\r\n        samples.splice(index, 0, copy);\r\n\r\n        this.setState(state => {\r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n        this.adjustGridIdNumbers();\r\n    }\r\n\r\n    /**\r\n     * When the sample grid length changes, the number of samples is adjusted accordingly.\r\n     */\r\n    refreshSampleIDs = () => {\r\n\r\n        this.setState(state => {\r\n            let newNumSamples = state.sampleGrid.length;\r\n            return { numSamples: newNumSamples };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes a row from the sample grid.\r\n     */\r\n    removeSample = (index) => {\r\n\r\n        this.setState(state => {\r\n            const samples = state.sampleGrid.filter((row, i) => i !== index);\r\n\r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n        this.adjustGridIdNumbers();\r\n    }\r\n\r\n    /**\r\n     * Saves a report to the storage array.\r\n     */\r\n    saveReport = () => {\r\n\r\n        if (this.state.sampleGrid.length < 1)\r\n        {\r\n            window.alert(\"Add samples with \\\"Create Grid\\\" to create a report.\");\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n            let newId = getStyledReportNumber(this.state.sampleType, this.state.reportNumber);\r\n\r\n            let newReport = {\r\n\r\n                reportNumber: this.state.reportNumber,\r\n                styledReportNumber: newId,\r\n                sampleType: this.state.sampleType,\r\n                reportType: this.state.reportType,\r\n                sampleGrid: copyObject(this.state.sampleGrid),\r\n                firstLabId: this.state.firstLabId,\r\n                lastLabId: this.state.firstLabId + this.state.sampleGrid.length - 1,\r\n                allTests: getAllTests(this.state.sampleType)\r\n\r\n            };\r\n\r\n            if (saved_report_ids.includes(newId))\r\n            {\r\n                window.alert(\"Report \" + newId + \" has already been used.\" );\r\n            }\r\n\r\n            else\r\n            {\r\n                window.alert(\"Saving report \" + newId + \".\");\r\n                saved_reports.push(newReport);\r\n                \r\n                saved_report_ids.push(newId);\r\n                this.clearGrid();\r\n                \r\n                if (newReport.sampleType === \"Plant\")\r\n                {\r\n                    saved_plant_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_plant_lab_ids.push(i);\r\n                }\r\n\r\n                else if (newReport.sampleType === \"Waste\")\r\n                {\r\n                    saved_waste_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_waste_lab_ids.push(i);\r\n\r\n                }\r\n\r\n                else if (newReport.sampleType === \"Solution\")\r\n                    {\r\n                    saved_solution_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_solution_lab_ids.push(i);\r\n\r\n                }\r\n\r\n                else if (newReport.sampleType === \"Media\")\r\n                    {\r\n                    saved_media_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_media_lab_ids.push(i);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                reportNumber: this.getNextNumbers(this.state.sampleType)[0],\r\n                firstLabId: this.getNextNumbers(this.state.sampleType)[1]\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Set the report type in the app state when it's changed in the form\r\n     * (without submitting the form);\r\n     */\r\n    setReportType = (type) => {\r\n        this.setState(state => {\r\n            return ({reportType: type});\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set the sample code of an individual row in the sample grid.\r\n     */\r\n    setSampleCode = (key, newCode) => {\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n            samples[key].code = newCode;\r\n            samples[key].tests = this.getTests(state.sampleType, newCode);\r\n            return { sampleGrid: samples };\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Set the sample type that's displayed in the form (not affecting the sample grid).\r\n     */\r\n    setFormSampleType = (type) => {\r\n        this.setState(state => {\r\n        \r\n            return {\r\n                formSampleType: type,\r\n                formSampleCode: this.getDropDown(type)[0],\r\n            }\r\n\r\n        });\r\n\r\n        this.setState(state => {\r\n        \r\n            return {\r\n                reportNumber: this.getNextNumbers(type)[0],\r\n                firstLabId: this.getNextNumbers(type)[1]\r\n            }\r\n\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Render either the report creation screen or the worklist/edit report screen.\r\n     */\r\n    render() {\r\n\r\n        if (this.state.createDisplay)\r\n        {\r\n            let totalSamples = 0;\r\n            for (let report of saved_reports)\r\n            {\r\n                totalSamples += report.sampleGrid.length;\r\n            }\r\n\r\n            return (\r\n            <div className=\"container\">\r\n            <header>\r\n            <h3>PWSM Receiving</h3>\r\n                <button id=\"displaySavedButton\"\r\n                    onClick={() => this.displayReports()}>{\"View Worklist (\" + totalSamples + \")\"}\r\n                </button>\r\n            </header>\r\n                <Form\r\n                    clearGrid={this.clearGrid}\r\n                    plantMenu={plant_codes}\r\n                    wasteMenu={waste_codes}\r\n                    solutionMenu={solution_codes}\r\n                    mediaMenu={media_codes}\r\n                    dropDown={this.getDropDown(this.state.formSampleType)}\r\n                    handleSubmit={this.handleSubmit}\r\n                    sampleCode={this.state.formSampleCode}\r\n                    setFormSampleType={this.setFormSampleType}\r\n                    setReportType={this.setReportType}\r\n                    />\r\n                <div className=\"container table-container\">\r\n                <Table\r\n                    addComment={this.addComment}\r\n                    assignTest={this.assignTest}\r\n                    clearGrid={this.clearGrid}\r\n                    dropDown={this.getDropDown(this.state.sampleType)}\r\n                    insertSample={this.insertSample}\r\n                    removeSample={this.removeSample}\r\n                    reportData={this.state}\r\n                    saveReport={this.saveReport}\r\n                    setSampleCode={this.setSampleCode}\r\n                    />\r\n                </div>\r\n            </div>\r\n            );\r\n        }\r\n\r\n        else if (this.state.worklistDisplay)\r\n        {\r\n            return (\r\n                <div className=\"container\">\r\n                    <button id=\"displayCreateScreen\" onClick={() => this.displayCreate()}>Create New Report</button>\r\n                    <Worklist\r\n                        records={saved_reports}\r\n\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './pwsm.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}