{"version":3,"sources":["data.js","SampleRow.js","Table.js","SavedTable.js","Form.js","App.js","index.js"],"names":["plant_codes","waste_codes_solid","waste_codes","concat","sort","isSolidWaste","code","includes","getStyledLabId","type","number","getStyledReportNumber","styledNumber","solution_codes","media_codes","all_plant_tests","all_waste_tests","all_solution_tests","all_media_tests","default_plant_tests","default_waste_liquid_tests","default_waste_solid_tests","default_solution_tests","default_media_tests","extra_tests","saved_reports","saved_report_ids","saved_plant_report_numbers","saved_waste_report_numbers","saved_solution_report_numbers","saved_media_report_numbers","saved_plant_lab_ids","saved_waste_lab_ids","saved_solution_lab_ids","saved_media_lab_ids","TestEditForm","props","id","style","display","className","testArray","map","test","name","value","defaultChecked","assignedTests","onChange","event","assignTest","target","checked","htmlFor","getTestArray","toggleTestEditForm","document","getElementById","refreshCheckBoxes","formId","val","getAttribute","setAttribute","SampleRow","sampleId","setSampleCode","index","dropDown","tests","filter","item","join","title","onClick","src","alt","comment","addComment","insertSample","removeSample","LabHeader","rNum","reportData","sampleType","reportNumber","lNum","firstLabId","sampleRange","numSamples","sampleGrid","length","reportType","saveReport","clearGrid","TableHeader","TableBody","rows","row","Table","SavedTable","records","first","lastLabId","styledReportNumber","Form","initialState","sampleCode","receiveDate","state","getCurrentDate","date","Date","year","getFullYear","month","getMonth","getDate","handleChange","setState","setReportType","handleSampleTypeChange","setFormSampleType","codeDiv","plantMenu","wasteMenu","solutionMenu","mediaMenu","getCodePhrase","selectNumSamples","select","submitForm","preventDefault","handleSubmit","this","onFocus","min","max","required","defaultValue","Component","copyArray","arr","result","push","getTests","result_array","hasOwnProperty","result_copy","App","createDisplay","savedDisplay","formSampleType","formSampleCode","key","newComment","samples","adjustGridIdNumbers","refreshSampleIDs","i","sample","shift","deleteSavedReport","displayCreate","getNextNumbers","displayReports","window","alert","getDropDown","report_numbers","lab_numbers","copy","Object","create","assign","splice","reportInfo","Number","parseInt","newId","newReport","newCode","ReactDOM","render","StrictMode"],"mappings":"4OAEaA,EAAc,CAEvB,SACA,YACA,UACA,QACA,YACA,QACA,QACA,YACA,eACA,aACA,YACA,WACA,mBACA,UACA,SACA,aACA,WACA,cACA,QACA,WACA,OACA,SACA,WACA,YACA,UACA,MACA,SACA,MACA,cACA,UACA,gBACA,YACA,mBACA,kBACA,WACA,OACA,WACA,UACA,OACA,OACA,QACA,OACA,SACA,OACA,aACA,YACA,OACA,UACA,UACA,SACA,aACA,UACA,SACA,YACA,SACA,aACA,QACA,YA4BSC,EAAoB,CAE7B,6BACA,yBACA,yBACA,iBACA,iBACA,gBACA,4BACA,gCACA,iCACA,iCACA,mCACA,iCACA,iCACA,mCACA,iCACA,gCACA,iCACA,qBACA,+BACA,8BACA,uBACA,qBACA,sBACA,yBACA,yBACA,2BACA,yCACA,0CACA,mCACA,mCACA,wCACA,yCACA,yCACA,yCACA,0CAISC,EA9DqB,CAE9B,4BACA,6BACA,8BACA,4BACA,8BACA,4BACA,4BACA,yBACA,+CACA,0BACA,oBACA,qBACA,qBACA,qBACA,2CACA,oCACA,qCA4C0CC,OAAOF,GAAmBG,OAEjE,SAASC,EAAaC,GACzB,OAAOL,EAAkBM,SAASD,GAG/B,SAASE,EAAeC,EAAMC,GAEjC,OAAOD,GAEH,IAAK,QAAS,MAAQ,IAAMC,EAC5B,IAAK,QAAU,MAAQ,IAAMA,EAC7B,IAAK,WAAa,MAAQ,IAAMA,EAChC,IAAK,QAAU,MAAQ,IAAMA,EAC7B,QAAS,OAAOA,GAKjB,SAASC,EAAsBF,EAAMC,GAEpC,IAAIE,EAAe,IAEnB,OAAOH,GAEH,IAAK,QAASG,GAAgB,IAAK,MACnC,IAAK,QAASA,GAAgB,IAAK,MACnC,IAAK,WAAYA,GAAgB,IAAK,MACtC,IAAK,QAASA,GAAgB,IAYlC,OARIF,EAAS,GAAIE,GAAgB,QACxBF,EAAS,IAAKE,GAAgB,OAC9BF,EAAS,IAAME,GAAgB,MAC/BF,EAAS,IAAME,GAAgB,KAC/BF,EAAS,MAAOE,GAAgB,KAEzCA,GAAgBF,EAKjB,IAAMG,EAAiB,CAE1B,oBACA,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","file":"static/js/main.837d3873.chunk.js","sourcesContent":["const myConstant = 4242;\r\n\r\nexport const plant_codes = [\r\n\r\n    \"Acacia\",\r\n    \"Ailanthus\",\r\n    \"Alfalfa\",\r\n    \"Apple\",\r\n    \"Asparagus\",\r\n    \"Basil\",\r\n    \"Beans\",\r\n    \"Bentgrass\",\r\n    \"Bermudagrass\",\r\n    \"Blackberry\",\r\n    \"Blueberry\",\r\n    \"Broccoli\",\r\n    \"Brussels sprouts\",\r\n    \"Cabbage\",\r\n    \"Canola\",\r\n    \"Cantaloupe\",\r\n    \"Carinata\",\r\n    \"Cauliflower\",\r\n    \"Cedar\",\r\n    \"Collards\",\r\n    \"Corn\",\r\n    \"Cotton\",\r\n    \"Cucumber\",\r\n    \"Dandelion\",\r\n    \"Dogwood\",\r\n    \"Elm\",\r\n    \"Fescue\",\r\n    \"Fig\",\r\n    \"Fir, Fraser\",\r\n    \"GH Hemp\",\r\n    \"GH Strawberry\",\r\n    \"GH Tomato\",\r\n    \"Grape, Muscadine\",\r\n    \"Grape, Vinifera\",\r\n    \"Honeydew\",\r\n    \"Kale\",\r\n    \"Kohlrabi\",\r\n    \"Lettuce\",\r\n    \"Oats\",\r\n    \"Okra\",\r\n    \"Peach\",\r\n    \"Pear\",\r\n    \"Pepper\",\r\n    \"Pine\",\r\n    \"Poinsettia\",\r\n    \"Raspberry\",\r\n    \"Rice\",\r\n    \"Soybean\",\r\n    \"Spinach\",\r\n    \"Squash\",\r\n    \"Strawberry\",\r\n    \"Tobacco\",\r\n    \"Tomato\",\r\n    \"Turfgrass\",\r\n    \"Turnip\",\r\n    \"Watermelon\",\r\n    \"Wheat\",\r\n    \"Zucchini\"\r\n\r\n];\r\n\r\n\r\n\r\nexport const waste_codes_liquid = [\r\n\r\n    \"ALS - Swine Lagoon Liquid\",\r\n    \"ALF - Swine Farrow to Wean\",\r\n    \"ALP - Poultry Lagoon Liquid\",\r\n    \"ALO - Other Lagoon Liquid\",\r\n    \"ASP - Poultry Lagoon Sludge\",\r\n    \"ASS - Swine Lagoon Sludge\",\r\n    \"ASO - Other Lagoon Sludge\",\r\n    \"BID - Domestic septage\",\r\n    \"BLL - Leachates/effluents or reclaimed water\",\r\n    \"GTL - Grease trap water\",\r\n    \"LSB - Beef Slurry\",\r\n    \"LSD - Dairy Slurry\",\r\n    \"LSS - Swine Slurry\",\r\n    \"LSO - Other Slurry\",\r\n    \"NLF - Food/beverage by-products (liquid)\",\r\n    \"NLA - Animal by-products (liquid)\",\r\n    \"NLO - Non-composted liquid, other\",\r\n\r\n];\r\n\r\nexport const waste_codes_solid = [\r\n\r\n    \"BCO - Biosolids, composted\",\r\n    \"BIO - Biosolids, other\",\r\n    \"BIX - Biosolids, mixed\",\r\n    \"CSW - Wood ash\",\r\n    \"CSC - Coal ash\",\r\n    \"CSB - Biochar\",\r\n    \"CSO - Ash, mixed or other\",\r\n    \"FCB - Composted manure - Beef\",\r\n    \"FCD - Composted manure - Dairy\",\r\n    \"FCH - Composted manure - Horse\",\r\n    \"FCP - Composted manure - Poultry\",\r\n    \"FCS - Composted manure - Swine\",\r\n    \"FCO - Composted manure - Other\",\r\n    \"FPM - Compost, poultry mortality\",\r\n    \"FSM - Compost, swine mortality\",\r\n    \"FCW - Compost, plant material\",\r\n    \"FCX - Compost, mixed materials\",\r\n    \"FCV - Vermicompost\",\r\n    \"HBB - Broiler breeder litter\",\r\n    \"HBP - Broiler pullet litter\",\r\n    \"HLB - Broiler litter\",\r\n    \"HLL - Layer litter\",\r\n    \"HLT - Turkey litter\",\r\n    \"IOC - Paper fiber/pulp\",\r\n    \"IOL - Lime by-products\",\r\n    \"NBS - Wood waste/sawdust\",\r\n    \"NCR - Raw plant material/crop residues\",\r\n    \"NSF - Food/beverage by-products (solid)\",\r\n    \"NSA - Animal by-products (solid)\",\r\n    \"NSO - Non-composted solid, other\",\r\n    \"SSB - Beef Surface Scraped/Stockpiled\",\r\n    \"SSD - Dairy Surface Scraped/Stockpiled\",\r\n    \"SSH - Horse Surface Scraped/Stockpiled\",\r\n    \"SSS - Swine Surface Scraped/Stockpiled\",\r\n    \"SSO - Other Surface Scraped/Stockpiled\",\r\n\r\n];\r\n\r\nexport const waste_codes = waste_codes_liquid.concat(waste_codes_solid).sort();\r\n\r\nexport function isSolidWaste(code) {\r\n    return waste_codes_solid.includes(code);\r\n}\r\n\r\nexport function getStyledLabId(type, number) {\r\n\r\n    switch(type)\r\n    {\r\n        case \"Plant\": return (\"P\" + number);\r\n        case \"Waste\":  return (\"W\" + number);\r\n        case \"Solution\":  return (\"S\" + number);\r\n        case \"Media\":  return (\"M\" + number);\r\n        default: return number;\r\n    }\r\n\r\n}\r\n\r\nexport function getStyledReportNumber(type, number) {\r\n\r\n        let styledNumber = \"R\";\r\n\r\n        switch(type)\r\n        {\r\n            case \"Plant\": styledNumber += \"P\"; break;\r\n            case \"Waste\": styledNumber += \"W\"; break;\r\n            case \"Solution\": styledNumber += \"S\"; break;\r\n            case \"Media\": styledNumber += \"M\"; break;\r\n            default: break;\r\n        }\r\n\r\n        if (number < 10) styledNumber += \"00000\";\r\n        else if (number < 100) styledNumber += \"0000\";\r\n        else if (number < 1000) styledNumber += \"000\";\r\n        else if (number < 1000) styledNumber += \"00\";\r\n        else if (number < 10000) styledNumber += \"0\";\r\n\r\n        styledNumber += number;\r\n\r\n        return styledNumber;\r\n    }\r\n\r\nexport const solution_codes = [\r\n\r\n    \"AS - Source Water\",\r\n    \"AP - Pond Water\",\r\n    \"AO - Other Aquaculture\",\r\n    \"FP - Fish Production/Recreation\",\r\n    \"QG - Ground Water\",\r\n    \"QH - Household (nonpotable\",\r\n    \"QS - Surface Water\",\r\n    \"QO - Other Water\",\r\n    \"NS - General Nutrient Solution\",\r\n    \"NT - Tobacco Nutrient Solution\",\r\n    \"NL - Pour-thru Leachate\",\r\n    \"NO - Other Nutrient Solution\",\r\n    \"LC - Cattle Water\",\r\n    \"LH - Horse Water\",\r\n    \"LS - Swine Water\",\r\n    \"LO - Other Livestock Water\",\r\n    \"IW - General Irrigation\",\r\n    \"IO - Overhead Irrigation\",\r\n    \"IT - Trickle Irrigation\",\r\n    \"HT - Hydroponic Tomato\",\r\n    \"HC - Hydroponic Cucumber\",\r\n    \"HL - Hydroponic Lettuce\",\r\n    \"HH - Hydroponic Herb\",\r\n    \"HH - Other Hydroponic\",\r\n    \"SP - Pesticide Solution\",\r\n    \"SH - Hydroponic Nutrient\",\r\n    \"SF - Floriculture Production\",\r\n    \"ST - Tobacco Transplant Production\",\r\n    \"SV - Vegetable Transplant Production\",\r\n    \"SO - Other Solution Source\"\r\n\r\n];\r\n\r\nexport const media_codes = [\r\n\r\n    \"GHF - GH Floriculture\",\r\n    \"GHV - GH Vegetable\",\r\n    \"NUR - Nursery Crop\",\r\n    \"TOB - Tobacco Transplants\",\r\n    \"OTH - Other\"\r\n\r\n];\r\n\r\nexport const all_plant_tests = [ \"Biomass\", \"C\", \"Cl\", \"DW\", \"ICP\", \"Mo\", \"N\", \"NO3\"];\r\nexport const all_waste_tests = [ \"C\", \"CCE\", \"DM\", \"EC\", \"HM\", \"HM - All\", \"ICP\", \"Mo\", \"N\", \"NH4/NO3\", \"pH\", \"TKN\"];\r\nexport const all_solution_tests = [ \"CBC\", \"Cl\", \"EC\", \"ICP\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\" ];\r\nexport const all_media_tests = [ \"Bulk Density\", \"Cl\", \"EC\", \"ICP\", \"Mo\", \"NH4/NO3\", \"pH\", \"Urea\" ];\r\n\r\n\r\nexport const default_plant_tests = [\"ICP\", \"N\"];\r\nexport const default_waste_liquid_tests = [\"ICP\", \"pH\", \"TKN\"];\r\nexport const default_waste_solid_tests = [\"DM\", \"ICP\", \"N\"];\r\nexport const default_solution_tests = [\"CBC\", \"EC\", \"ICP\", \"NH4/NO3\", \"pH\"];\r\nexport const default_media_tests = [\"EC\", \"ICP\", \"pH\"];\r\n\r\nexport const extra_tests = {\r\n\r\n    \"Alfalfa\": [\"Mo\"],\r\n    \"Broccoli\": [\"Mo\"],\r\n    \"Brussels sprouts\": [\"Mo\"],\r\n    \"Cauliflower\": [\"Mo\"],\r\n    \"Cabbage\": [\"Mo\"],\r\n    \"Canola\": [\"Mo\"],\r\n    \"Collards\": [\"Mo\"],\r\n    \"Kale\": [\"Mo\"],\r\n    \"Kohlrabi\": [\"Mo\"],\r\n    \"Poinsettia\": [\"Mo\"],\r\n    \"Spinach\": [\"Mo\"],\r\n    \"Turnip\": [\"Mo\"],\r\n\r\n    \"Strawberry\": [\"NO3\"],\r\n    \"Cotton\": [\"NO3\"],\r\n\r\n    \"BID - Domestic septage\": [\"pH\", \"EC\"],\r\n    \"BCO - Biosolids, composted\": [\"C\", \"pH\", \"EC\"],\r\n    \"BIO - Biosolids, other\": [\"C\", \"pH\", \"EC\"],\r\n    \"BIX - Biosolids, mixed\": [\"C\", \"pH\", \"EC\"],\r\n    \"BLL - Leachates/effluents or reclaimed water\": [\"pH\", \"EC\"],\r\n\r\n    \"CSW - Wood ash\": [\"C\", \"pH\", \"EC\"],\r\n    \"CSC - Coal ash\": [\"C\", \"pH\", \"EC\"],\r\n    \"CSB - Biochar\": [\"C\", \"pH\", \"EC\"],\r\n    \"CSO - Ash, mixed or other\": [\"C\", \"pH\", \"EC\"],\r\n\r\n    \"FCB - Composted manure - Beef\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCD - Composted manure - Dairy\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCH - Composted manure - Horse\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCP - Composted manure - Poultry\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCS - Composted manure - Swine\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCO - Composted manure - Other\": [\"C\", \"pH\", \"EC\"],\r\n    \"FPM - Compost, poultry mortality\": [\"C\", \"pH\", \"EC\"],\r\n    \"FSM - Compost, swine mortality\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCW - Compost, plant material\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCX - Compost, mixed materials\": [\"C\", \"pH\", \"EC\"],\r\n    \"FCV - Vermicompost\": [\"C\", \"pH\", \"EC\"],\r\n\r\n    \"GTL - Grease trap water\": [\"pH\", \"EC\"],\r\n\r\n    \"IOC - Paper fiber/pulp\": [\"C\", \"pH\", \"EC\"],\r\n    \"IOL - Lime by-products\": [\"CCE\", \"pH\", \"EC\"],\r\n\r\n    \"NBS - Wood waste/sawdust\": [\"C\", \"pH\", \"EC\"],\r\n    \"NCR - Raw plant material/crop residues\": [\"C\", \"pH\", \"EC\"],\r\n    \"NSF - Food/beverage by-products (solid)\": [\"C\", \"pH\", \"EC\"],\r\n    \"NLF - Food/beverage by-products (liquid)\": [\"pH\", \"EC\"],\r\n    \"NSA - Animal by-products (solid)\": [\"C\", \"pH\", \"EC\"],\r\n    \"NLA - Animal by-products (liquid)\": [\"pH\", \"EC\"],\r\n    \"NSO - Non-composted solid, other\": [\"C\", \"pH\", \"EC\"],\r\n    \"NLO - Non-composted liquid, other\": [\"pH\", \"EC\"]\r\n\r\n\r\n};\r\n\r\nexport const saved_reports = [];\r\nexport const saved_report_ids = [];\r\n\r\nexport const saved_plant_report_numbers = [];\r\nexport const saved_waste_report_numbers = [];\r\nexport const saved_solution_report_numbers = [];\r\nexport const saved_media_report_numbers = [];\r\n\r\nexport const saved_plant_lab_ids = [];\r\nexport const saved_waste_lab_ids = [];\r\nexport const saved_solution_lab_ids = [];\r\nexport const saved_media_lab_ids = [];\r\n\r\nexport default myConstant;","import React from 'react';\r\nimport {all_plant_tests, all_waste_tests, all_solution_tests, all_media_tests,\r\n        default_plant_tests, default_waste_liquid_tests, default_waste_solid_tests,\r\n        default_solution_tests, default_media_tests,\r\n        isSolidWaste, getStyledLabId} from './data.js';\r\n\r\n\r\n\r\nconst TestEditForm = (props) => {\r\n\r\n    return (\r\n\r\n        <form id={props.id + \"testEditForm\"} style={{display: \"none\",}} >\r\n        <div className=\"testEditForm\">\r\n        {\r\n            props.testArray.map( (test) => {\r\n                return(<div key={test} className=\"testCheckbox\">\r\n                        <input type=\"checkbox\"  id={props.id + test} name={test} value={test}\r\n                        defaultChecked={props.assignedTests.includes(test)? true: false}\r\n                        onChange={(event) => props.assignTest(props.id, test, event.target.checked)}></input>\r\n                        <label htmlFor={props.id + test}>{test}</label>\r\n                        \r\n                       </div>);\r\n            })\r\n        }\r\n        </div>\r\n\r\n        </form>\r\n\r\n    );\r\n}\r\n\r\nconst getTestArray = (type) => {\r\n\r\n    if (type === \"Plant\") return all_plant_tests;\r\n    if (type === \"Waste\") return all_waste_tests;\r\n    if (type === \"Solution\") return all_solution_tests;\r\n    if (type === \"Media\") return all_media_tests;\r\n}\r\n\r\n\r\n\r\nconst refreshCheckBoxes = (id, testArray, assignedTests) => {\r\n\r\n    for (let test of testArray)\r\n    {\r\n        if (assignedTests.includes(test))\r\n            document.getElementById(id + test).checked = true;\r\n        else\r\n            document.getElementById(id + test).checked = false;\r\n\r\n    }\r\n}\r\n\r\nconst toggleTestEditForm = (id, testArray, assignedTests) =>\r\n{\r\n    refreshCheckBoxes(id, testArray, assignedTests);\r\n\r\n    const formId = id + \"testEditForm\";\r\n\r\n    const form = document.getElementById(formId);\r\n    let val = \"display: block;\";\r\n\r\n    if (form.getAttribute(\"style\") === (\"display: block;\"))\r\n        val = \"display: none;\";\r\n\r\n    document.getElementById(formId).setAttribute(\"style\", val);\r\n}\r\n\r\nconst SampleRow = (props) => {\r\n\r\n\r\n    return (\r\n        <tr>\r\n            <td>{getStyledLabId(props.type, props.sampleId)}</td>\r\n            <td>\r\n                        <select name=\"sampleCode\" id=\"codeSelect\"  value={props.code} onChange={(event) => props.setSampleCode(props.index, event.target.value)} >\r\n                            {props.dropDown.map( (code, index) => {\r\n                                return (<option key={index} value={code}>{code}</option>);\r\n                            })}\r\n                        </select>\r\n            </td>\r\n            <td>{props.tests.filter(item => { \r\n                \r\n                if (props.type === \"Plant\" && default_plant_tests.includes(item)) return false; \r\n                if (props.type === \"Waste\" && !isSolidWaste(props.code) && default_waste_liquid_tests.includes(item)) return false; \r\n                if (props.type === \"Waste\" && isSolidWaste(props.code) && default_waste_solid_tests.includes(item)) return false; \r\n                if (props.type === \"Solution\" && default_solution_tests.includes(item)) return false; \r\n                if (props.type === \"Media\" && default_media_tests.includes(item)) return false;\r\n\r\n\r\n                return true;\r\n\r\n            }).join(\" \")}\r\n\r\n\r\n                <button id=\"testEdit\" className=\"editTests\" title=\"Edit Tests\" onClick={() => toggleTestEditForm(props.sampleId, getTestArray(props.type), props.tests)} >\r\n                <img src=\"https://s2.svgbox.net/materialui.svg?ic=edit&color=fff\" alt=\"\"/>\r\n                </button>\r\n                <TestEditForm id={props.sampleId} testArray={getTestArray(props.type)} assignedTests={props.tests} assignTest={props.assignTest}/>\r\n\r\n            </td>\r\n\r\n            <td>\r\n                <input type=\"text\" value={props.comment} onChange={(event) => props.addComment(props.index, event.target.value)} />\r\n            </td>\r\n            <td>\r\n                <button className=\"duplicate gridButton\" title=\"Duplicate Row\" onClick={() => props.insertSample(props.index)}>+</button>\r\n            </td>\r\n            <td>\r\n                <button className=\"delete gridButton\" title=\"Delete Row\" onClick={() => props.removeSample(props.index)}>X</button>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SampleRow;","import React from 'react';\r\nimport SampleRow from './SampleRow';\r\nimport {getStyledReportNumber, getStyledLabId} from './data.js';\r\n\r\n\r\n\r\nconst LabHeader = (props) => {\r\n\r\n    const rNum = getStyledReportNumber(props.reportData.sampleType, props.reportData.reportNumber);\r\n    let lNum = getStyledLabId(props.reportData.sampleType, props.reportData.firstLabId);\r\n    let sampleRange = (props.reportData.numSamples > 1)? lNum + \" - \" + (props.reportData.firstLabId + props.reportData.numSamples - 1)\r\n        : lNum;\r\n\r\n    if (props.reportData.sampleGrid.length > 0)\r\n    return (\r\n        <thead>\r\n            <tr className=\"tr-fixed\">\r\n                <th>{rNum + \" - \" + props.reportData.reportType}</th>\r\n                <th>Samples: {sampleRange}</th>\r\n                <th></th>\r\n                <th><button id=\"saveButton\" onClick={() => props.saveReport()}>Save Report</button></th>\r\n                <th></th>\r\n                <th><button id=\"clearButton\" onClick={() => props.clearGrid()}>Clear Grid</button></th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n\r\n    else\r\n        return (\r\n        <thead>\r\n            <tr>\r\n                <th>Report Type: {props.reportData.reportType} </th>\r\n                <th></th>\r\n                <th></th>\r\n                <th></th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n\r\n};\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>Lab ID</th>\r\n                <th>Crop/Code</th>\r\n                <th>Extra Tests</th>\r\n                <th>Comment</th>\r\n                <th>Insert</th>\r\n                <th>Delete</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\n\r\nconst TableBody = (props) => {\r\n\r\n    const rows = props.reportData.sampleGrid.map((row, index) => {\r\n        return (\r\n            <SampleRow\r\n            addComment={props.addComment}\r\n            assignTest={props.assignTest}\r\n            code={row.code}\r\n            comment={row.comment}\r\n            dropDown={props.dropDown}\r\n            index={index}\r\n            insertSample={props.insertSample}\r\n            key={index}\r\n            sampleId={row.sampleId}\r\n            removeSample={props.removeSample}\r\n            setSampleCode={props.setSampleCode}\r\n            tests={row.tests}\r\n            type={props.reportData.sampleType}\r\n            />\r\n           \r\n        );\r\n    });\r\n    return (\r\n        <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\nconst Table = (props) => {\r\n\r\n    // const {reportData, removeSample} = props;\r\n\r\n    return (\r\n\r\n        <table className=\"striped-table pwsm-table\">\r\n            <LabHeader reportData={props.reportData} clearGrid={props.clearGrid} saveReport={props.saveReport} />\r\n            <TableHeader />\r\n            <TableBody\r\n                addComment={props.addComment}\r\n                assignTest={props.assignTest}\r\n                dropDown={props.dropDown}\r\n                insertSample={props.insertSample}\r\n                removeSample={props.removeSample}\r\n                reportData={props.reportData}\r\n                setSampleCode={props.setSampleCode}\r\n                />\r\n        </table>\r\n        );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport {getStyledLabId} from './data.js';\r\n\r\nconst SavedTable = (props) => {\r\n\r\n\r\n\r\n    const rows = props.records.map((row, index) => {\r\n\r\n        let first = getStyledLabId(row.sampleType, row.firstLabId);\r\n        let sampleRange = (row.firstLabId < row.lastLabId)? (first + \" - \" + row.lastLabId)\r\n        : first;\r\n\r\n        return(\r\n\r\n        <tr key={index}>\r\n            <td>{row.styledReportNumber}</td>\r\n            <td>{row.sampleType}</td>\r\n            <td>{row.reportType}</td>\r\n            <td>{sampleRange}</td>\r\n        </tr>\r\n\r\n        );\r\n\r\n    });\r\n\r\n    return (\r\n\r\n        <table className=\"striped-table\">\r\n            <thead>\r\n                <tr>\r\n                <th>Report Number</th>\r\n                <th>Sample Type</th>\r\n                <th>Report Type</th>\r\n                <th>Lab IDs</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {rows}\r\n            </tbody>\r\n        </table>\r\n        );\r\n}\r\n\r\nexport default SavedTable;","import React, {Component} from 'react';\r\n\r\nclass Form extends Component {\r\n\r\n    componentDidMount() {\r\n        this.setState({receiveDate: this.getCurrentDate()});\r\n    }\r\n\r\n    initialState = {\r\n\r\n        sampleType: 'Plant',\r\n        reportType: 'Predictive',\r\n        numSamples: 1,\r\n        sampleCode: this.props.dropDown[0],\r\n        receiveDate: \"1985-01-01\"\r\n\r\n    };\r\n\r\n\r\n\r\n    state = this.initialState;\r\n\r\n\r\n\r\n    getCurrentDate = () => {\r\n\r\n        const date = new Date();\r\n        const year = date.getFullYear();\r\n        let month = date.getMonth() + 1;\r\n            if (month < 10) month = \"0\" + month;\r\n        const day = date.getDate();\r\n\r\n        return (year + \"-\" + month + \"-\" + day);\r\n    }\r\n\r\n    handleChange = (event) => {\r\n\r\n        this.setState(state => {\r\n            return { [event.target.name]: event.target.value };\r\n        });\r\n\r\n        if (event.target.name === \"reportType\")\r\n            this.props.setReportType(event.target.value);\r\n\r\n\r\n    }\r\n\r\n    handleSampleTypeChange = (event) => {\r\n\r\n        this.props.clearGrid();\r\n        this.props.setFormSampleType(event.target.value);\r\n        this.setState(state => {\r\n\r\n            let type = event.target.value;\r\n            let code = \"\";\r\n            let codeDiv = document.getElementById(\"codeColor\");\r\n\r\n            switch(type)\r\n            {\r\n                case \"Plant\":\r\n                    code = this.props.plantMenu[0];\r\n                    codeDiv.setAttribute(\"style\", \"background-color: #ffff99;\");\r\n                    break;\r\n                case \"Waste\":\r\n                    code = this.props.wasteMenu[0];\r\n                    codeDiv.setAttribute(\"style\", \"background-color: #ffbf80;\");\r\n                    break;\r\n                case \"Solution\":\r\n                    code = this.props.solutionMenu[0];\r\n                    codeDiv.setAttribute(\"style\", \"background-color: #99ddff;\");\r\n                    break;\r\n                case \"Media\":\r\n                    code = this.props.mediaMenu[0];\r\n                    codeDiv.setAttribute(\"style\", \"background-color: #ffb3cc;\");\r\n                    break;\r\n\r\n                default: break;\r\n            }\r\n\r\n\r\n            return {sampleType: type, sampleCode: code};\r\n        });\r\n\r\n\r\n    }\r\n\r\n    getCodePhrase = (type) => {\r\n\r\n        switch(type)\r\n        {\r\n            case \"Plant\": return \"Plant Crop Name: \";\r\n            case \"Waste\": return \"Waste Code: \";\r\n            case \"Solution\": return \"Solution Code: \";\r\n            case \"Media\": return \"Media Code: \";\r\n            default: return \"Crop/Code\";\r\n        }\r\n    }\r\n        \r\n\r\n    \r\n\r\n    selectNumSamples = () => { document.getElementById(\"numSamplesInput\").select(); }\r\n\r\n\r\n    submitForm = (event) => {\r\n        event.preventDefault();\r\n        this.props.handleSubmit(this.state);\r\n    }\r\n\r\n    render(props) {\r\n\r\n        return (\r\n            <form>\r\n\r\n                <fieldset className=\"flex-row\" onChange={this.handleSampleTypeChange}>\r\n                    <label>Select Sample Type:</label>\r\n                    <input type=\"radio\" id=\"plant\" name=\"sampleType\" value=\"Plant\" defaultChecked />\r\n                    <label htmlFor=\"plant\"><div className=\"radioArea plantBG\">Plant</div></label>\r\n\r\n                    <input type=\"radio\" id=\"waste\" name=\"sampleType\" value=\"Waste\" />\r\n                    <label htmlFor=\"waste\"><div className=\"radioArea wasteBG\">Waste</div></label>\r\n\r\n                    <input type=\"radio\" id=\"solution\" name=\"sampleType\" value=\"Solution\" />\r\n                    <label htmlFor=\"solution\"> <div className=\"radioArea solutionBG\">Solution</div></label>\r\n\r\n                    <input type=\"radio\" id=\"media\" name=\"sampleType\" value=\"Media\" />\r\n                    <label htmlFor=\"media\"><div className=\"radioArea mediaBG\">Media</div></label>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"flex-row\" onChange={this.handleChange}>\r\n                    <label>Select Report Type:</label>\r\n                    <input type=\"radio\" id=\"predictive\" name=\"reportType\" value=\"Predictive\" defaultChecked />\r\n                    <label htmlFor=\"predictive\"> <div className=\"radioArea reportTypeBG\">Predictive</div></label>\r\n\r\n                    <input type=\"radio\" id=\"diagnostic\" name=\"reportType\" value=\"Diagnostic\" />\r\n                    <label htmlFor=\"diagnostic\"> <div className=\"radioArea reportTypeBG\">Diagnostic</div></label>\r\n\r\n                    <input type=\"radio\" id=\"research\" name=\"reportType\" value=\"Research\" />\r\n                    <label htmlFor=\"research\"> <div className=\"radioArea reportTypeBG\">Research</div></label>\r\n\r\n                    <input type=\"radio\" id=\"internal\" name=\"reportType\" value=\"Internal\" />\r\n                    <label htmlFor=\"internal\"> <div className=\"radioArea reportTypeBG\">Internal</div></label>\r\n\r\n                    <input type=\"radio\" id=\"out-of-state\" name=\"reportType\" value=\"Out of State\" />\r\n                    <label htmlFor=\"out-of-state\"> <div className=\"radioArea reportTypeBG\">Out of State</div></label>\r\n                </fieldset>\r\n\r\n                <fieldset className=\"flex-row form-bottom-row\">\r\n\r\n                    <label id=\"codeColor\">{this.getCodePhrase(this.state.sampleType)}</label>\r\n                    <select name=\"sampleCode\" id=\"codeSelect\" onChange={this.handleChange} value={this.state.sampleCode} >\r\n                        {this.props.dropDown.map( (code, index) => {\r\n                            return (<option key={index} value={code}>{code}</option>);\r\n                        })}\r\n                    </select>\r\n\r\n                    <label htmlFor=\"numSamples\">Number of Samples:</label>\r\n                    <input type=\"number\" id=\"numSamplesInput\" name=\"numSamples\" onChange={this.handleChange}\r\n                    onFocus={this.selectNumSamples} value={this.state.numSamples} min=\"1\" max=\"500\" required />\r\n\r\n                    <label htmlFor=\"receiveDate\">Date Received:</label>\r\n                    <input type=\"date\" id=\"receiveDateInput\" name=\"receiveDate\"\r\n                    defaultValue={this.getCurrentDate()}\r\n                    onChange={this.handleChange}/>\r\n\r\n                </fieldset>\r\n                \r\n\r\n                <input type=\"submit\" id=\"create-grid-button\" value=\"Create Grid\" onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport Table from './Table';\r\nimport SavedTable from './SavedTable';\r\nimport Form from './Form';\r\nimport {plant_codes, waste_codes, solution_codes, media_codes,\r\n        default_plant_tests, default_waste_solid_tests, default_waste_liquid_tests, default_solution_tests, default_media_tests,\r\n        extra_tests, saved_reports, saved_report_ids, saved_plant_report_numbers, saved_waste_report_numbers,\r\n        saved_solution_report_numbers, saved_media_report_numbers, saved_plant_lab_ids, saved_waste_lab_ids,\r\n        saved_solution_lab_ids, saved_media_lab_ids,\r\n        isSolidWaste, getStyledReportNumber} from './data.js';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                reportNumber: this.getNextNumbers(this.state.sampleType)[0],\r\n                firstLabId: this.getNextNumbers(this.state.sampleType)[1]\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    initialState = {\r\n\r\n        createDisplay: true,\r\n        savedDisplay: false,\r\n\r\n        sampleType: \"Plant\",\r\n        formSampleType: \"Plant\",\r\n        formSampleCode: plant_codes[0],\r\n        reportType: \"Predictive\",\r\n        reportNumber: 101,\r\n        firstLabId: 1001,\r\n        numSamples: 1,\r\n        receiveDate: \"1985-01-01\",\r\n        sampleCode: '',\r\n        sampleGrid: []\r\n    };\r\n\r\n\r\n    state = this.initialState;\r\n\r\n\r\n\r\n    addComment = (key, newComment) => {\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n            samples[key].comment = newComment; \r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n    }\r\n\r\n    assignTest = (id, test, val) => {\r\n\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n\r\n            samples = samples.map( row => {\r\n\r\n                if (row.sampleId === id)\r\n                {\r\n                    if (val === true && !row.tests.includes(test))\r\n                    {\r\n                        row.tests.push(test);\r\n                        row.tests.sort();\r\n\r\n                    }\r\n\r\n                    else if (val === false && row.tests.includes(test))\r\n                    {\r\n                        row.tests = row.tests.filter(item => item !== test);\r\n\r\n                    }\r\n                }\r\n\r\n                return row;\r\n            })\r\n\r\n            return { sampleGrid: samples };\r\n        });\r\n    }\r\n\r\n\r\n    adjustGridIdNumbers = () => {\r\n\r\n        this.refreshSampleIDs();\r\n        this.setState(state => {\r\n\r\n            let first = state.firstLabId;\r\n            let samples = state.sampleGrid;\r\n\r\n            for (let i = 0; i < state.numSamples; ++i)\r\n            {\r\n                samples[i].sampleId = first + i;\r\n            }\r\n\r\n            return { sampleGrid: samples };\r\n        })\r\n\r\n    }\r\n\r\n    clearGrid = () => {\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n\r\n            for (let sample of samples)\r\n            {\r\n                while (sample.tests.length > 0)\r\n                    sample.tests.shift();\r\n\r\n            }\r\n\r\n            while (samples.length > 0)\r\n                samples.shift();\r\n\r\n            return {sampleGrid: samples, numSamples: 1}\r\n\r\n        });\r\n    }\r\n\r\n    deleteSavedReport = (reportNumber) =>\r\n    {\r\n\r\n    }\r\n\r\n    displayCreate = () => {\r\n\r\n\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                sampleType: \"Plant\",\r\n                sampleCode: plant_codes[0],\r\n                formSampleType: \"Plant\",\r\n                formSampleCode: plant_codes[0],\r\n                reportType: \"Predictive\",\r\n                reportNumber: this.getNextNumbers(\"Plant\")[0],\r\n                firstLabId: this.getNextNumbers(\"Plant\")[1],\r\n                createDisplay: true,\r\n                savedDisplay: false\r\n            }\r\n        })\r\n    }\r\n\r\n    displayReports = () => {\r\n\r\n        if (saved_reports.length < 1)\r\n        {\r\n            window.alert(\"No reports have been created.\");\r\n            return;\r\n        }\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                createDisplay: false,\r\n                savedDisplay: true\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    getDropDown = (type) => {\r\n\r\n        switch (type)\r\n        {\r\n            case \"Plant\": return plant_codes;\r\n            case \"Waste\": return waste_codes;\r\n            case \"Solution\": return solution_codes;\r\n            case \"Media\": return media_codes;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    getNextNumbers = (type) => {\r\n\r\n        let report_numbers = saved_plant_report_numbers;\r\n        let lab_numbers = saved_plant_lab_ids;\r\n        let nextReportNumber = 1;\r\n        let nextLabNumber = 1;\r\n\r\n        switch (type)\r\n        {\r\n            case \"Waste\":\r\n                report_numbers = saved_waste_report_numbers;\r\n                lab_numbers = saved_waste_lab_ids;\r\n                break;\r\n\r\n            case \"Solution\":\r\n                report_numbers = saved_solution_report_numbers;\r\n                lab_numbers = saved_solution_lab_ids;\r\n                break;\r\n\r\n            case \"Media\":\r\n                report_numbers = saved_media_report_numbers;\r\n                lab_numbers = saved_media_lab_ids;\r\n                break;\r\n\r\n            default: break;\r\n        }\r\n\r\n        if (report_numbers.length < 1)\r\n            nextReportNumber = 101;\r\n        else\r\n            nextReportNumber = report_numbers[report_numbers.length - 1] + 1;\r\n\r\n        if (lab_numbers.length < 1)\r\n            nextLabNumber = 1001;\r\n        else\r\n            nextLabNumber = lab_numbers[lab_numbers.length - 1] + 1;\r\n\r\n        return [nextReportNumber, nextLabNumber];\r\n    }\r\n\r\n    insertSample = (index) => {\r\n\r\n        let samples = this.state.sampleGrid;\r\n        let copy = Object.create(samples[index]);\r\n        copy = Object.assign(copy, samples[index]);\r\n\r\n        copy.tests = copyArray(samples[index].tests);\r\n\r\n        samples.splice(index, 0, copy);\r\n\r\n        this.setState(state => {\r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n        this.adjustGridIdNumbers();\r\n    }\r\n\r\n    refreshSampleIDs = () => {\r\n\r\n        this.setState(state => {\r\n            let newNumSamples = state.sampleGrid.length;\r\n            return { numSamples: newNumSamples };\r\n        });\r\n    }\r\n\r\n    removeSample = (index) => {\r\n\r\n        this.setState(state => {\r\n            const samples = state.sampleGrid.filter((row, i) => i !== index);\r\n\r\n            return { sampleGrid: samples };\r\n        });\r\n\r\n        this.adjustGridIdNumbers();\r\n    }\r\n\r\n    handleSubmit = (reportInfo) => {\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                sampleType: reportInfo.sampleType,\r\n                reportType: reportInfo.reportType,\r\n                numSamples: Number.parseInt(reportInfo.numSamples),\r\n                sampleCode: reportInfo.sampleCode,\r\n                receiveDate: reportInfo.receiveDate\r\n            };\r\n\r\n        });\r\n\r\n        this.setState(state => {\r\n\r\n            let samples = [];\r\n\r\n            for (let i = 0; i < reportInfo.numSamples; ++i)\r\n            {\r\n                samples.push({\r\n                    sampleId: Number.parseInt(this.state.firstLabId) + i,\r\n                    code: reportInfo.sampleCode,\r\n                    tests: getTests(reportInfo.sampleType, reportInfo.sampleCode),\r\n                    comment: \"\"});\r\n            }\r\n\r\n\r\n            return {sampleGrid: samples};\r\n\r\n        });\r\n    \r\n    }\r\n\r\n    saveReport = () => {\r\n\r\n        if (this.state.sampleGrid.length < 1)\r\n        {\r\n            window.alert(\"Add samples with \\\"Create Grid\\\" to create a report.\");\r\n        }\r\n\r\n        else\r\n        {\r\n\r\n            let newId = getStyledReportNumber(this.state.sampleType, this.state.reportNumber);\r\n\r\n            let newReport = {\r\n\r\n                reportNumber: this.state.reportNumber,\r\n                styledReportNumber: newId,\r\n                sampleType: this.state.sampleType,\r\n                reportType: this.state.reportType,\r\n                sampleGrid: this.state.sampleGrid,\r\n                firstLabId: this.state.firstLabId,\r\n                lastLabId: this.state.firstLabId + this.state.sampleGrid.length - 1\r\n\r\n            };\r\n\r\n            if (saved_report_ids.includes(newId))\r\n            {\r\n                window.alert(\"Report \" + newId + \" has already been used.\" );\r\n            }\r\n\r\n            else\r\n            {\r\n                window.alert(\"Saving report \" + newId + \".\");\r\n                saved_reports.push(newReport);\r\n                saved_report_ids.push(newId);\r\n                this.clearGrid();\r\n                \r\n                if (newReport.sampleType === \"Plant\")\r\n                {\r\n                    saved_plant_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_plant_lab_ids.push(i);\r\n                }\r\n\r\n                else if (newReport.sampleType === \"Waste\")\r\n                {\r\n                    saved_waste_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_waste_lab_ids.push(i);\r\n\r\n                }\r\n\r\n                else if (newReport.sampleType === \"Solution\")\r\n                    {\r\n                    saved_solution_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_solution_lab_ids.push(i);\r\n\r\n                }\r\n\r\n                else if (newReport.sampleType === \"Media\")\r\n                    {\r\n                    saved_media_report_numbers.push(newReport.reportNumber);\r\n                    for (let i = newReport.firstLabId; i <= newReport.lastLabId; ++i)\r\n                        saved_media_lab_ids.push(i);\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState(state => {\r\n\r\n            return {\r\n                reportNumber: this.getNextNumbers(this.state.sampleType)[0],\r\n                firstLabId: this.getNextNumbers(this.state.sampleType)[1]\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    setReportType = (type) => {\r\n        this.setState(state => {\r\n            return ({reportType: type});\r\n        });\r\n    }\r\n\r\n    setSampleCode = (key, newCode) => {\r\n        this.setState(state => {\r\n\r\n            let samples = state.sampleGrid;\r\n            samples[key].code = newCode;\r\n            samples[key].tests = getTests(state.sampleType, newCode);\r\n            return { sampleGrid: samples };\r\n        });\r\n    };\r\n\r\n    setFormSampleType = (type) => {\r\n        this.setState(state => {\r\n        \r\n            return {\r\n                formSampleType: type,\r\n                formSampleCode: this.getDropDown(type)[0],\r\n            }\r\n\r\n        });\r\n\r\n        this.setState(state => {\r\n        \r\n            return {\r\n                reportNumber: this.getNextNumbers(type)[0],\r\n                firstLabId: this.getNextNumbers(type)[1]\r\n            }\r\n\r\n        });\r\n    };\r\n\r\n    render() {\r\n\r\n        if (this.state.createDisplay)\r\n        {\r\n            return (\r\n            <div className=\"container\">\r\n            <header>\r\n            <h3>PWSM Receiving</h3>\r\n                <button id=\"displaySavedButton\"\r\n                    onClick={() => this.displayReports()}>{\"Show Saved Reports (\" + saved_report_ids.length + \")\"}\r\n                </button>\r\n            </header>\r\n                <Form\r\n                    clearGrid={this.clearGrid}\r\n                    plantMenu={plant_codes}\r\n                    wasteMenu={waste_codes}\r\n                    solutionMenu={solution_codes}\r\n                    mediaMenu={media_codes}\r\n                    dropDown={this.getDropDown(this.state.formSampleType)}\r\n                    handleSubmit={this.handleSubmit}\r\n                    sampleCode={this.state.formSampleCode}\r\n                    setFormSampleType={this.setFormSampleType}\r\n                    setReportType={this.setReportType}\r\n                    />\r\n                <div className=\"container table-container\">\r\n                <Table\r\n                    addComment={this.addComment}\r\n                    assignTest={this.assignTest}\r\n                    clearGrid={this.clearGrid}\r\n                    dropDown={this.getDropDown(this.state.sampleType)}\r\n                    insertSample={this.insertSample}\r\n                    removeSample={this.removeSample}\r\n                    reportData={this.state}\r\n                    saveReport={this.saveReport}\r\n                    setSampleCode={this.setSampleCode}\r\n                    />\r\n                </div>\r\n            </div>\r\n            );\r\n        }\r\n\r\n        else if (this.state.savedDisplay)\r\n        {\r\n            return (\r\n                <div className=\"container\">\r\n                    <button id=\"displayCreateScreen\" onClick={() => this.displayCreate()}>Create New Report</button>\r\n                    <SavedTable\r\n                        records={saved_reports}\r\n\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction copyArray(arr)\r\n{\r\n    let result = [];\r\n\r\n    for (let item of arr)\r\n        result.push(item);\r\n\r\n    return result;\r\n}\r\n\r\nfunction getTests(type, code)\r\n{\r\n    let result_array = [];\r\n\r\n    switch(type)\r\n    {\r\n        case \"Plant\":\r\n            result_array = default_plant_tests;\r\n            break;\r\n        case \"Solution\":\r\n            result_array = default_solution_tests;\r\n            break;\r\n        case \"Media\":\r\n            result_array = default_media_tests;\r\n            break;\r\n        case \"Waste\":\r\n            if (isSolidWaste(code))\r\n                result_array = default_waste_solid_tests;\r\n            else\r\n                result_array = default_waste_liquid_tests;\r\n            break;\r\n\r\n        default: break;\r\n    }\r\n\r\n    if (extra_tests.hasOwnProperty(code))\r\n        result_array = result_array.concat(extra_tests[code]);\r\n\r\n\r\n    let result_copy = [];\r\n    for (let item of result_array)\r\n        result_copy.push(item);\r\n\r\n    return result_copy;\r\n}\r\n\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './pwsm.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}